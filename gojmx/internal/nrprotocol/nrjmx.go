// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package nrprotocol

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type ResponseType int64
const (
  ResponseType_STRING ResponseType = 1
  ResponseType_DOUBLE ResponseType = 2
  ResponseType_INT ResponseType = 3
  ResponseType_BOOL ResponseType = 4
  ResponseType_ERROR ResponseType = 5
)

func (p ResponseType) String() string {
  switch p {
  case ResponseType_STRING: return "STRING"
  case ResponseType_DOUBLE: return "DOUBLE"
  case ResponseType_INT: return "INT"
  case ResponseType_BOOL: return "BOOL"
  case ResponseType_ERROR: return "ERROR"
  }
  return "<UNSET>"
}

func ResponseTypeFromString(s string) (ResponseType, error) {
  switch s {
  case "STRING": return ResponseType_STRING, nil 
  case "DOUBLE": return ResponseType_DOUBLE, nil 
  case "INT": return ResponseType_INT, nil 
  case "BOOL": return ResponseType_BOOL, nil 
  case "ERROR": return ResponseType_ERROR, nil 
  }
  return ResponseType(0), fmt.Errorf("not a valid ResponseType string")
}


func ResponseTypePtr(v ResponseType) *ResponseType { return &v }

func (p ResponseType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResponseType) UnmarshalText(text []byte) error {
q, err := ResponseTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResponseType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResponseType(v)
return nil
}

func (p * ResponseType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ConnectionURL
//  - Hostname
//  - Port
//  - UriPath
//  - Username
//  - Password
//  - KeyStore
//  - KeyStorePassword
//  - TrustStore
//  - TrustStorePassword
//  - IsRemote
//  - IsJBossStandaloneMode
//  - UseSSL
//  - RequestTimeoutMs
//  - Verbose
//  - EnableInternalStats
//  - MaxInternalStatsSize
type JMXConfig struct {
  ConnectionURL string `thrift:"connectionURL,1" db:"connectionURL" json:"connectionURL"`
  Hostname string `thrift:"hostname,2" db:"hostname" json:"hostname"`
  Port int32 `thrift:"port,3" db:"port" json:"port"`
  UriPath *string `thrift:"uriPath,4" db:"uriPath" json:"uriPath,omitempty"`
  Username string `thrift:"username,5" db:"username" json:"username"`
  Password string `thrift:"password,6" db:"password" json:"password"`
  KeyStore string `thrift:"keyStore,7" db:"keyStore" json:"keyStore"`
  KeyStorePassword string `thrift:"keyStorePassword,8" db:"keyStorePassword" json:"keyStorePassword"`
  TrustStore string `thrift:"trustStore,9" db:"trustStore" json:"trustStore"`
  TrustStorePassword string `thrift:"trustStorePassword,10" db:"trustStorePassword" json:"trustStorePassword"`
  IsRemote bool `thrift:"isRemote,11" db:"isRemote" json:"isRemote"`
  IsJBossStandaloneMode bool `thrift:"isJBossStandaloneMode,12" db:"isJBossStandaloneMode" json:"isJBossStandaloneMode"`
  UseSSL bool `thrift:"useSSL,13" db:"useSSL" json:"useSSL"`
  RequestTimeoutMs int64 `thrift:"requestTimeoutMs,14" db:"requestTimeoutMs" json:"requestTimeoutMs"`
  Verbose bool `thrift:"verbose,15" db:"verbose" json:"verbose"`
  EnableInternalStats bool `thrift:"enableInternalStats,16" db:"enableInternalStats" json:"enableInternalStats"`
  MaxInternalStatsSize int64 `thrift:"maxInternalStatsSize,17" db:"maxInternalStatsSize" json:"maxInternalStatsSize"`
}

func NewJMXConfig() *JMXConfig {
  return &JMXConfig{}
}


func (p *JMXConfig) GetConnectionURL() string {
  return p.ConnectionURL
}

func (p *JMXConfig) GetHostname() string {
  return p.Hostname
}

func (p *JMXConfig) GetPort() int32 {
  return p.Port
}
var JMXConfig_UriPath_DEFAULT string
func (p *JMXConfig) GetUriPath() string {
  if !p.IsSetUriPath() {
    return JMXConfig_UriPath_DEFAULT
  }
return *p.UriPath
}

func (p *JMXConfig) GetUsername() string {
  return p.Username
}

func (p *JMXConfig) GetPassword() string {
  return p.Password
}

func (p *JMXConfig) GetKeyStore() string {
  return p.KeyStore
}

func (p *JMXConfig) GetKeyStorePassword() string {
  return p.KeyStorePassword
}

func (p *JMXConfig) GetTrustStore() string {
  return p.TrustStore
}

func (p *JMXConfig) GetTrustStorePassword() string {
  return p.TrustStorePassword
}

func (p *JMXConfig) GetIsRemote() bool {
  return p.IsRemote
}

func (p *JMXConfig) GetIsJBossStandaloneMode() bool {
  return p.IsJBossStandaloneMode
}

func (p *JMXConfig) GetUseSSL() bool {
  return p.UseSSL
}

func (p *JMXConfig) GetRequestTimeoutMs() int64 {
  return p.RequestTimeoutMs
}

func (p *JMXConfig) GetVerbose() bool {
  return p.Verbose
}

func (p *JMXConfig) GetEnableInternalStats() bool {
  return p.EnableInternalStats
}

func (p *JMXConfig) GetMaxInternalStatsSize() int64 {
  return p.MaxInternalStatsSize
}
func (p *JMXConfig) IsSetUriPath() bool {
  return p.UriPath != nil
}

func (p *JMXConfig) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXConfig)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConnectionURL = v
}
  return nil
}

func (p *JMXConfig)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *JMXConfig)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *JMXConfig)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UriPath = &v
}
  return nil
}

func (p *JMXConfig)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *JMXConfig)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *JMXConfig)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.KeyStore = v
}
  return nil
}

func (p *JMXConfig)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.KeyStorePassword = v
}
  return nil
}

func (p *JMXConfig)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TrustStore = v
}
  return nil
}

func (p *JMXConfig)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TrustStorePassword = v
}
  return nil
}

func (p *JMXConfig)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.IsRemote = v
}
  return nil
}

func (p *JMXConfig)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.IsJBossStandaloneMode = v
}
  return nil
}

func (p *JMXConfig)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.UseSSL = v
}
  return nil
}

func (p *JMXConfig)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.RequestTimeoutMs = v
}
  return nil
}

func (p *JMXConfig)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Verbose = v
}
  return nil
}

func (p *JMXConfig)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.EnableInternalStats = v
}
  return nil
}

func (p *JMXConfig)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.MaxInternalStatsSize = v
}
  return nil
}

func (p *JMXConfig) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "JMXConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXConfig) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "connectionURL", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connectionURL: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ConnectionURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.connectionURL (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connectionURL: ", p), err) }
  return err
}

func (p *JMXConfig) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostname: ", p), err) }
  return err
}

func (p *JMXConfig) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err) }
  return err
}

func (p *JMXConfig) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUriPath() {
    if err := oprot.WriteFieldBegin(ctx, "uriPath", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:uriPath: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.UriPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uriPath (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:uriPath: ", p), err) }
  }
  return err
}

func (p *JMXConfig) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:username: ", p), err) }
  return err
}

func (p *JMXConfig) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:password: ", p), err) }
  return err
}

func (p *JMXConfig) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyStore", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:keyStore: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KeyStore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyStore (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:keyStore: ", p), err) }
  return err
}

func (p *JMXConfig) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyStorePassword", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:keyStorePassword: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KeyStorePassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyStorePassword (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:keyStorePassword: ", p), err) }
  return err
}

func (p *JMXConfig) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trustStore", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:trustStore: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TrustStore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trustStore (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:trustStore: ", p), err) }
  return err
}

func (p *JMXConfig) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trustStorePassword", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:trustStorePassword: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TrustStorePassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trustStorePassword (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:trustStorePassword: ", p), err) }
  return err
}

func (p *JMXConfig) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isRemote", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:isRemote: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsRemote)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isRemote (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:isRemote: ", p), err) }
  return err
}

func (p *JMXConfig) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isJBossStandaloneMode", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:isJBossStandaloneMode: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsJBossStandaloneMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isJBossStandaloneMode (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:isJBossStandaloneMode: ", p), err) }
  return err
}

func (p *JMXConfig) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "useSSL", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:useSSL: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.UseSSL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useSSL (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:useSSL: ", p), err) }
  return err
}

func (p *JMXConfig) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "requestTimeoutMs", thrift.I64, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:requestTimeoutMs: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestTimeoutMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestTimeoutMs (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:requestTimeoutMs: ", p), err) }
  return err
}

func (p *JMXConfig) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verbose", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:verbose: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Verbose)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verbose (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:verbose: ", p), err) }
  return err
}

func (p *JMXConfig) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enableInternalStats", thrift.BOOL, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:enableInternalStats: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EnableInternalStats)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enableInternalStats (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:enableInternalStats: ", p), err) }
  return err
}

func (p *JMXConfig) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxInternalStatsSize", thrift.I64, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:maxInternalStatsSize: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MaxInternalStatsSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxInternalStatsSize (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:maxInternalStatsSize: ", p), err) }
  return err
}

func (p *JMXConfig) Equals(other *JMXConfig) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ConnectionURL != other.ConnectionURL { return false }
  if p.Hostname != other.Hostname { return false }
  if p.Port != other.Port { return false }
  if p.UriPath != other.UriPath {
    if p.UriPath == nil || other.UriPath == nil {
      return false
    }
    if (*p.UriPath) != (*other.UriPath) { return false }
  }
  if p.Username != other.Username { return false }
  if p.Password != other.Password { return false }
  if p.KeyStore != other.KeyStore { return false }
  if p.KeyStorePassword != other.KeyStorePassword { return false }
  if p.TrustStore != other.TrustStore { return false }
  if p.TrustStorePassword != other.TrustStorePassword { return false }
  if p.IsRemote != other.IsRemote { return false }
  if p.IsJBossStandaloneMode != other.IsJBossStandaloneMode { return false }
  if p.UseSSL != other.UseSSL { return false }
  if p.RequestTimeoutMs != other.RequestTimeoutMs { return false }
  if p.Verbose != other.Verbose { return false }
  if p.EnableInternalStats != other.EnableInternalStats { return false }
  if p.MaxInternalStatsSize != other.MaxInternalStatsSize { return false }
  return true
}

func (p *JMXConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXConfig(%+v)", *p)
}

// Attributes:
//  - StatusMsg
//  - Name
//  - ResponseType
//  - StringValue
//  - DoubleValue
//  - IntValue
//  - BoolValue
type AttributeResponse struct {
  StatusMsg string `thrift:"statusMsg,1" db:"statusMsg" json:"statusMsg"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  ResponseType ResponseType `thrift:"responseType,3" db:"responseType" json:"responseType"`
  StringValue string `thrift:"stringValue,4" db:"stringValue" json:"stringValue"`
  DoubleValue float64 `thrift:"doubleValue,5" db:"doubleValue" json:"doubleValue"`
  IntValue int64 `thrift:"intValue,6" db:"intValue" json:"intValue"`
  BoolValue bool `thrift:"boolValue,7" db:"boolValue" json:"boolValue"`
}

func NewAttributeResponse() *AttributeResponse {
  return &AttributeResponse{}
}


func (p *AttributeResponse) GetStatusMsg() string {
  return p.StatusMsg
}

func (p *AttributeResponse) GetName() string {
  return p.Name
}

func (p *AttributeResponse) GetResponseType() ResponseType {
  return p.ResponseType
}

func (p *AttributeResponse) GetStringValue() string {
  return p.StringValue
}

func (p *AttributeResponse) GetDoubleValue() float64 {
  return p.DoubleValue
}

func (p *AttributeResponse) GetIntValue() int64 {
  return p.IntValue
}

func (p *AttributeResponse) GetBoolValue() bool {
  return p.BoolValue
}
func (p *AttributeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AttributeResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StatusMsg = v
}
  return nil
}

func (p *AttributeResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *AttributeResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ResponseType(v)
  p.ResponseType = temp
}
  return nil
}

func (p *AttributeResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StringValue = v
}
  return nil
}

func (p *AttributeResponse)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DoubleValue = v
}
  return nil
}

func (p *AttributeResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IntValue = v
}
  return nil
}

func (p *AttributeResponse)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.BoolValue = v
}
  return nil
}

func (p *AttributeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AttributeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AttributeResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMsg", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:statusMsg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StatusMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMsg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:statusMsg: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responseType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:responseType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ResponseType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.responseType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:responseType: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stringValue", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stringValue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StringValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringValue (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stringValue: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "doubleValue", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:doubleValue: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.DoubleValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.doubleValue (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:doubleValue: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "intValue", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:intValue: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.IntValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intValue (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:intValue: ", p), err) }
  return err
}

func (p *AttributeResponse) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "boolValue", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:boolValue: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.BoolValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolValue (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:boolValue: ", p), err) }
  return err
}

func (p *AttributeResponse) Equals(other *AttributeResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StatusMsg != other.StatusMsg { return false }
  if p.Name != other.Name { return false }
  if p.ResponseType != other.ResponseType { return false }
  if p.StringValue != other.StringValue { return false }
  if p.DoubleValue != other.DoubleValue { return false }
  if p.IntValue != other.IntValue { return false }
  if p.BoolValue != other.BoolValue { return false }
  return true
}

func (p *AttributeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AttributeResponse(%+v)", *p)
}

// Attributes:
//  - StatType
//  - MBean
//  - Attrs
//  - ResponseCount
//  - Milliseconds
//  - StartTimestamp
//  - Successful
type InternalStat struct {
  StatType string `thrift:"statType,1" db:"statType" json:"statType"`
  MBean string `thrift:"mBean,2" db:"mBean" json:"mBean"`
  Attrs []string `thrift:"attrs,3" db:"attrs" json:"attrs"`
  ResponseCount int64 `thrift:"responseCount,4" db:"responseCount" json:"responseCount"`
  Milliseconds float64 `thrift:"milliseconds,5" db:"milliseconds" json:"milliseconds"`
  StartTimestamp int64 `thrift:"startTimestamp,6" db:"startTimestamp" json:"startTimestamp"`
  Successful bool `thrift:"successful,7" db:"successful" json:"successful"`
}

func NewInternalStat() *InternalStat {
  return &InternalStat{}
}


func (p *InternalStat) GetStatType() string {
  return p.StatType
}

func (p *InternalStat) GetMBean() string {
  return p.MBean
}

func (p *InternalStat) GetAttrs() []string {
  return p.Attrs
}

func (p *InternalStat) GetResponseCount() int64 {
  return p.ResponseCount
}

func (p *InternalStat) GetMilliseconds() float64 {
  return p.Milliseconds
}

func (p *InternalStat) GetStartTimestamp() int64 {
  return p.StartTimestamp
}

func (p *InternalStat) GetSuccessful() bool {
  return p.Successful
}
func (p *InternalStat) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalStat)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StatType = v
}
  return nil
}

func (p *InternalStat)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MBean = v
}
  return nil
}

func (p *InternalStat)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Attrs =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Attrs = append(p.Attrs, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *InternalStat)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ResponseCount = v
}
  return nil
}

func (p *InternalStat)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Milliseconds = v
}
  return nil
}

func (p *InternalStat)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.StartTimestamp = v
}
  return nil
}

func (p *InternalStat)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Successful = v
}
  return nil
}

func (p *InternalStat) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InternalStat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalStat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statType", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:statType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StatType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:statType: ", p), err) }
  return err
}

func (p *InternalStat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mBean", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mBean: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MBean)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mBean (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mBean: ", p), err) }
  return err
}

func (p *InternalStat) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attrs", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attrs: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Attrs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Attrs {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attrs: ", p), err) }
  return err
}

func (p *InternalStat) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responseCount", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:responseCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ResponseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.responseCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:responseCount: ", p), err) }
  return err
}

func (p *InternalStat) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "milliseconds", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:milliseconds: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Milliseconds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.milliseconds (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:milliseconds: ", p), err) }
  return err
}

func (p *InternalStat) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTimestamp", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:startTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:startTimestamp: ", p), err) }
  return err
}

func (p *InternalStat) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "successful", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:successful: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Successful)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.successful (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:successful: ", p), err) }
  return err
}

func (p *InternalStat) Equals(other *InternalStat) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StatType != other.StatType { return false }
  if p.MBean != other.MBean { return false }
  if len(p.Attrs) != len(other.Attrs) { return false }
  for i, _tgt := range p.Attrs {
    _src1 := other.Attrs[i]
    if _tgt != _src1 { return false }
  }
  if p.ResponseCount != other.ResponseCount { return false }
  if p.Milliseconds != other.Milliseconds { return false }
  if p.StartTimestamp != other.StartTimestamp { return false }
  if p.Successful != other.Successful { return false }
  return true
}

func (p *InternalStat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalStat(%+v)", *p)
}

// Attributes:
//  - Message
//  - CauseMessage
//  - Stacktrace
type JMXError struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
  CauseMessage string `thrift:"causeMessage,2" db:"causeMessage" json:"causeMessage"`
  Stacktrace string `thrift:"stacktrace,3" db:"stacktrace" json:"stacktrace"`
}

func NewJMXError() *JMXError {
  return &JMXError{}
}


func (p *JMXError) GetMessage() string {
  return p.Message
}

func (p *JMXError) GetCauseMessage() string {
  return p.CauseMessage
}

func (p *JMXError) GetStacktrace() string {
  return p.Stacktrace
}
func (p *JMXError) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXError)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *JMXError)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CauseMessage = v
}
  return nil
}

func (p *JMXError)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Stacktrace = v
}
  return nil
}

func (p *JMXError) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "JMXError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXError) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *JMXError) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "causeMessage", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:causeMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CauseMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.causeMessage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:causeMessage: ", p), err) }
  return err
}

func (p *JMXError) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stacktrace", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stacktrace: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Stacktrace)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stacktrace (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stacktrace: ", p), err) }
  return err
}

func (p *JMXError) Equals(other *JMXError) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  if p.CauseMessage != other.CauseMessage { return false }
  if p.Stacktrace != other.Stacktrace { return false }
  return true
}

func (p *JMXError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXError(%+v)", *p)
}

func (p *JMXError) Error() string {
  return p.String()
}

func (JMXError) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*JMXError)(nil)

// Attributes:
//  - Message
type JMXConnectionError struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewJMXConnectionError() *JMXConnectionError {
  return &JMXConnectionError{}
}


func (p *JMXConnectionError) GetMessage() string {
  return p.Message
}
func (p *JMXConnectionError) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXConnectionError)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *JMXConnectionError) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "JMXConnectionError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXConnectionError) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *JMXConnectionError) Equals(other *JMXConnectionError) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *JMXConnectionError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXConnectionError(%+v)", *p)
}

func (p *JMXConnectionError) Error() string {
  return p.String()
}

func (JMXConnectionError) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*JMXConnectionError)(nil)

type JMXService interface {
  // Parameters:
  //  - Config
  Connect(ctx context.Context, config *JMXConfig) (_err error)
  Disconnect(ctx context.Context) (_err error)
  GetClientVersion(ctx context.Context) (_r string, _err error)
  // Parameters:
  //  - MBeanNamePattern
  QueryMBeanNames(ctx context.Context, mBeanNamePattern string) (_r []string, _err error)
  // Parameters:
  //  - MBeanName
  GetMBeanAttributeNames(ctx context.Context, mBeanName string) (_r []string, _err error)
  // Parameters:
  //  - MBeanName
  //  - Attributes
  GetMBeanAttributes(ctx context.Context, mBeanName string, attributes []string) (_r []*AttributeResponse, _err error)
  // Parameters:
  //  - MBeanNamePattern
  //  - Attributes
  QueryMBeanAttributes(ctx context.Context, mBeanNamePattern string, attributes []string) (_r []*AttributeResponse, _err error)
  GetInternalStats(ctx context.Context) (_r []*InternalStat, _err error)
}

type JMXServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewJMXServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *JMXServiceClient {
  return &JMXServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewJMXServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *JMXServiceClient {
  return &JMXServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewJMXServiceClient(c thrift.TClient) *JMXServiceClient {
  return &JMXServiceClient{
    c: c,
  }
}

func (p *JMXServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *JMXServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *JMXServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Config
func (p *JMXServiceClient) Connect(ctx context.Context, config *JMXConfig) (_err error) {
  var _args2 JMXServiceConnectArgs
  _args2.Config = config
  var _result4 JMXServiceConnectResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "connect", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  switch {
  case _result4.ConnErr!= nil:
    return _result4.ConnErr
  case _result4.JmxErr!= nil:
    return _result4.JmxErr
  }

  return nil
}

func (p *JMXServiceClient) Disconnect(ctx context.Context) (_err error) {
  var _args5 JMXServiceDisconnectArgs
  var _result7 JMXServiceDisconnectResult
  var _meta6 thrift.ResponseMeta
  _meta6, _err = p.Client_().Call(ctx, "disconnect", &_args5, &_result7)
  p.SetLastResponseMeta_(_meta6)
  if _err != nil {
    return
  }
  switch {
  case _result7.Err!= nil:
    return _result7.Err
  }

  return nil
}

func (p *JMXServiceClient) GetClientVersion(ctx context.Context) (_r string, _err error) {
  var _args8 JMXServiceGetClientVersionArgs
  var _result10 JMXServiceGetClientVersionResult
  var _meta9 thrift.ResponseMeta
  _meta9, _err = p.Client_().Call(ctx, "getClientVersion", &_args8, &_result10)
  p.SetLastResponseMeta_(_meta9)
  if _err != nil {
    return
  }
  switch {
  case _result10.Err!= nil:
    return _r, _result10.Err
  }

  return _result10.GetSuccess(), nil
}

// Parameters:
//  - MBeanNamePattern
func (p *JMXServiceClient) QueryMBeanNames(ctx context.Context, mBeanNamePattern string) (_r []string, _err error) {
  var _args11 JMXServiceQueryMBeanNamesArgs
  _args11.MBeanNamePattern = mBeanNamePattern
  var _result13 JMXServiceQueryMBeanNamesResult
  var _meta12 thrift.ResponseMeta
  _meta12, _err = p.Client_().Call(ctx, "queryMBeanNames", &_args11, &_result13)
  p.SetLastResponseMeta_(_meta12)
  if _err != nil {
    return
  }
  switch {
  case _result13.ConnErr!= nil:
    return _r, _result13.ConnErr
  case _result13.JmxErr!= nil:
    return _r, _result13.JmxErr
  }

  return _result13.GetSuccess(), nil
}

// Parameters:
//  - MBeanName
func (p *JMXServiceClient) GetMBeanAttributeNames(ctx context.Context, mBeanName string) (_r []string, _err error) {
  var _args14 JMXServiceGetMBeanAttributeNamesArgs
  _args14.MBeanName = mBeanName
  var _result16 JMXServiceGetMBeanAttributeNamesResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "getMBeanAttributeNames", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  switch {
  case _result16.ConnErr!= nil:
    return _r, _result16.ConnErr
  case _result16.JmxErr!= nil:
    return _r, _result16.JmxErr
  }

  return _result16.GetSuccess(), nil
}

// Parameters:
//  - MBeanName
//  - Attributes
func (p *JMXServiceClient) GetMBeanAttributes(ctx context.Context, mBeanName string, attributes []string) (_r []*AttributeResponse, _err error) {
  var _args17 JMXServiceGetMBeanAttributesArgs
  _args17.MBeanName = mBeanName
  _args17.Attributes = attributes
  var _result19 JMXServiceGetMBeanAttributesResult
  var _meta18 thrift.ResponseMeta
  _meta18, _err = p.Client_().Call(ctx, "getMBeanAttributes", &_args17, &_result19)
  p.SetLastResponseMeta_(_meta18)
  if _err != nil {
    return
  }
  switch {
  case _result19.ConnErr!= nil:
    return _r, _result19.ConnErr
  case _result19.JmxErr!= nil:
    return _r, _result19.JmxErr
  }

  return _result19.GetSuccess(), nil
}

// Parameters:
//  - MBeanNamePattern
//  - Attributes
func (p *JMXServiceClient) QueryMBeanAttributes(ctx context.Context, mBeanNamePattern string, attributes []string) (_r []*AttributeResponse, _err error) {
  var _args20 JMXServiceQueryMBeanAttributesArgs
  _args20.MBeanNamePattern = mBeanNamePattern
  _args20.Attributes = attributes
  var _result22 JMXServiceQueryMBeanAttributesResult
  var _meta21 thrift.ResponseMeta
  _meta21, _err = p.Client_().Call(ctx, "queryMBeanAttributes", &_args20, &_result22)
  p.SetLastResponseMeta_(_meta21)
  if _err != nil {
    return
  }
  switch {
  case _result22.ConnErr!= nil:
    return _r, _result22.ConnErr
  case _result22.JmxErr!= nil:
    return _r, _result22.JmxErr
  }

  return _result22.GetSuccess(), nil
}

func (p *JMXServiceClient) GetInternalStats(ctx context.Context) (_r []*InternalStat, _err error) {
  var _args23 JMXServiceGetInternalStatsArgs
  var _result25 JMXServiceGetInternalStatsResult
  var _meta24 thrift.ResponseMeta
  _meta24, _err = p.Client_().Call(ctx, "getInternalStats", &_args23, &_result25)
  p.SetLastResponseMeta_(_meta24)
  if _err != nil {
    return
  }
  switch {
  case _result25.JmxErr!= nil:
    return _r, _result25.JmxErr
  }

  return _result25.GetSuccess(), nil
}

type JMXServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler JMXService
}

func (p *JMXServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *JMXServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *JMXServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewJMXServiceProcessor(handler JMXService) *JMXServiceProcessor {

  self26 := &JMXServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self26.processorMap["connect"] = &jMXServiceProcessorConnect{handler:handler}
  self26.processorMap["disconnect"] = &jMXServiceProcessorDisconnect{handler:handler}
  self26.processorMap["getClientVersion"] = &jMXServiceProcessorGetClientVersion{handler:handler}
  self26.processorMap["queryMBeanNames"] = &jMXServiceProcessorQueryMBeanNames{handler:handler}
  self26.processorMap["getMBeanAttributeNames"] = &jMXServiceProcessorGetMBeanAttributeNames{handler:handler}
  self26.processorMap["getMBeanAttributes"] = &jMXServiceProcessorGetMBeanAttributes{handler:handler}
  self26.processorMap["queryMBeanAttributes"] = &jMXServiceProcessorQueryMBeanAttributes{handler:handler}
  self26.processorMap["getInternalStats"] = &jMXServiceProcessorGetInternalStats{handler:handler}
return self26
}

func (p *JMXServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x27 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x27.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x27

}

type jMXServiceProcessorConnect struct {
  handler JMXService
}

func (p *jMXServiceProcessorConnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err28 error
  args := JMXServiceConnectArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "connect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceConnectResult{}
  if err2 := p.handler.Connect(ctx, args.Config); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *JMXConnectionError:
      result.ConnErr = v
    case *JMXError:
      result.JmxErr = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc29 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing connect: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "connect", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err28 = thrift.WrapTException(err2)
      }
      if err2 := _exc29.Write(ctx, oprot); _write_err28 == nil && err2 != nil {
        _write_err28 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err28 == nil && err2 != nil {
        _write_err28 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err28 == nil && err2 != nil {
        _write_err28 = thrift.WrapTException(err2)
      }
      if _write_err28 != nil {
        return false, thrift.WrapTException(_write_err28)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "connect", thrift.REPLY, seqId); err2 != nil {
    _write_err28 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err28 == nil && err2 != nil {
    _write_err28 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err28 == nil && err2 != nil {
    _write_err28 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err28 == nil && err2 != nil {
    _write_err28 = thrift.WrapTException(err2)
  }
  if _write_err28 != nil {
    return false, thrift.WrapTException(_write_err28)
  }
  return true, err
}

type jMXServiceProcessorDisconnect struct {
  handler JMXService
}

func (p *jMXServiceProcessorDisconnect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err30 error
  args := JMXServiceDisconnectArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "disconnect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceDisconnectResult{}
  if err2 := p.handler.Disconnect(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *JMXError:
      result.Err = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc31 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disconnect: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "disconnect", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err30 = thrift.WrapTException(err2)
      }
      if err2 := _exc31.Write(ctx, oprot); _write_err30 == nil && err2 != nil {
        _write_err30 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err30 == nil && err2 != nil {
        _write_err30 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err30 == nil && err2 != nil {
        _write_err30 = thrift.WrapTException(err2)
      }
      if _write_err30 != nil {
        return false, thrift.WrapTException(_write_err30)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "disconnect", thrift.REPLY, seqId); err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err30 == nil && err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err30 == nil && err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err30 == nil && err2 != nil {
    _write_err30 = thrift.WrapTException(err2)
  }
  if _write_err30 != nil {
    return false, thrift.WrapTException(_write_err30)
  }
  return true, err
}

type jMXServiceProcessorGetClientVersion struct {
  handler JMXService
}

func (p *jMXServiceProcessorGetClientVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err32 error
  args := JMXServiceGetClientVersionArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getClientVersion", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceGetClientVersionResult{}
  if retval, err2 := p.handler.GetClientVersion(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *JMXError:
      result.Err = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc33 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClientVersion: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "getClientVersion", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err32 = thrift.WrapTException(err2)
      }
      if err2 := _exc33.Write(ctx, oprot); _write_err32 == nil && err2 != nil {
        _write_err32 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err32 == nil && err2 != nil {
        _write_err32 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err32 == nil && err2 != nil {
        _write_err32 = thrift.WrapTException(err2)
      }
      if _write_err32 != nil {
        return false, thrift.WrapTException(_write_err32)
      }
      return true, err
    }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getClientVersion", thrift.REPLY, seqId); err2 != nil {
    _write_err32 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err32 == nil && err2 != nil {
    _write_err32 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err32 == nil && err2 != nil {
    _write_err32 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err32 == nil && err2 != nil {
    _write_err32 = thrift.WrapTException(err2)
  }
  if _write_err32 != nil {
    return false, thrift.WrapTException(_write_err32)
  }
  return true, err
}

type jMXServiceProcessorQueryMBeanNames struct {
  handler JMXService
}

func (p *jMXServiceProcessorQueryMBeanNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err34 error
  args := JMXServiceQueryMBeanNamesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "queryMBeanNames", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceQueryMBeanNamesResult{}
  if retval, err2 := p.handler.QueryMBeanNames(ctx, args.MBeanNamePattern); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *JMXConnectionError:
      result.ConnErr = v
    case *JMXError:
      result.JmxErr = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc35 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMBeanNames: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "queryMBeanNames", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err34 = thrift.WrapTException(err2)
      }
      if err2 := _exc35.Write(ctx, oprot); _write_err34 == nil && err2 != nil {
        _write_err34 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err34 == nil && err2 != nil {
        _write_err34 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err34 == nil && err2 != nil {
        _write_err34 = thrift.WrapTException(err2)
      }
      if _write_err34 != nil {
        return false, thrift.WrapTException(_write_err34)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "queryMBeanNames", thrift.REPLY, seqId); err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err34 == nil && err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err34 == nil && err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err34 == nil && err2 != nil {
    _write_err34 = thrift.WrapTException(err2)
  }
  if _write_err34 != nil {
    return false, thrift.WrapTException(_write_err34)
  }
  return true, err
}

type jMXServiceProcessorGetMBeanAttributeNames struct {
  handler JMXService
}

func (p *jMXServiceProcessorGetMBeanAttributeNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err36 error
  args := JMXServiceGetMBeanAttributeNamesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getMBeanAttributeNames", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceGetMBeanAttributeNamesResult{}
  if retval, err2 := p.handler.GetMBeanAttributeNames(ctx, args.MBeanName); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *JMXConnectionError:
      result.ConnErr = v
    case *JMXError:
      result.JmxErr = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc37 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMBeanAttributeNames: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "getMBeanAttributeNames", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if err2 := _exc37.Write(ctx, oprot); _write_err36 == nil && err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err36 == nil && err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err36 == nil && err2 != nil {
        _write_err36 = thrift.WrapTException(err2)
      }
      if _write_err36 != nil {
        return false, thrift.WrapTException(_write_err36)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getMBeanAttributeNames", thrift.REPLY, seqId); err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err36 == nil && err2 != nil {
    _write_err36 = thrift.WrapTException(err2)
  }
  if _write_err36 != nil {
    return false, thrift.WrapTException(_write_err36)
  }
  return true, err
}

type jMXServiceProcessorGetMBeanAttributes struct {
  handler JMXService
}

func (p *jMXServiceProcessorGetMBeanAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err38 error
  args := JMXServiceGetMBeanAttributesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getMBeanAttributes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceGetMBeanAttributesResult{}
  if retval, err2 := p.handler.GetMBeanAttributes(ctx, args.MBeanName, args.Attributes); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *JMXConnectionError:
      result.ConnErr = v
    case *JMXError:
      result.JmxErr = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc39 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMBeanAttributes: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "getMBeanAttributes", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err38 = thrift.WrapTException(err2)
      }
      if err2 := _exc39.Write(ctx, oprot); _write_err38 == nil && err2 != nil {
        _write_err38 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err38 == nil && err2 != nil {
        _write_err38 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err38 == nil && err2 != nil {
        _write_err38 = thrift.WrapTException(err2)
      }
      if _write_err38 != nil {
        return false, thrift.WrapTException(_write_err38)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getMBeanAttributes", thrift.REPLY, seqId); err2 != nil {
    _write_err38 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err38 == nil && err2 != nil {
    _write_err38 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err38 == nil && err2 != nil {
    _write_err38 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err38 == nil && err2 != nil {
    _write_err38 = thrift.WrapTException(err2)
  }
  if _write_err38 != nil {
    return false, thrift.WrapTException(_write_err38)
  }
  return true, err
}

type jMXServiceProcessorQueryMBeanAttributes struct {
  handler JMXService
}

func (p *jMXServiceProcessorQueryMBeanAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err40 error
  args := JMXServiceQueryMBeanAttributesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "queryMBeanAttributes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceQueryMBeanAttributesResult{}
  if retval, err2 := p.handler.QueryMBeanAttributes(ctx, args.MBeanNamePattern, args.Attributes); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *JMXConnectionError:
      result.ConnErr = v
    case *JMXError:
      result.JmxErr = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc41 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMBeanAttributes: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "queryMBeanAttributes", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err40 = thrift.WrapTException(err2)
      }
      if err2 := _exc41.Write(ctx, oprot); _write_err40 == nil && err2 != nil {
        _write_err40 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err40 == nil && err2 != nil {
        _write_err40 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err40 == nil && err2 != nil {
        _write_err40 = thrift.WrapTException(err2)
      }
      if _write_err40 != nil {
        return false, thrift.WrapTException(_write_err40)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "queryMBeanAttributes", thrift.REPLY, seqId); err2 != nil {
    _write_err40 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err40 == nil && err2 != nil {
    _write_err40 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err40 == nil && err2 != nil {
    _write_err40 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err40 == nil && err2 != nil {
    _write_err40 = thrift.WrapTException(err2)
  }
  if _write_err40 != nil {
    return false, thrift.WrapTException(_write_err40)
  }
  return true, err
}

type jMXServiceProcessorGetInternalStats struct {
  handler JMXService
}

func (p *jMXServiceProcessorGetInternalStats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err42 error
  args := JMXServiceGetInternalStatsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getInternalStats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := JMXServiceGetInternalStatsResult{}
  if retval, err2 := p.handler.GetInternalStats(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *JMXError:
      result.JmxErr = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc43 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getInternalStats: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "getInternalStats", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err42 = thrift.WrapTException(err2)
      }
      if err2 := _exc43.Write(ctx, oprot); _write_err42 == nil && err2 != nil {
        _write_err42 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err42 == nil && err2 != nil {
        _write_err42 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err42 == nil && err2 != nil {
        _write_err42 = thrift.WrapTException(err2)
      }
      if _write_err42 != nil {
        return false, thrift.WrapTException(_write_err42)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getInternalStats", thrift.REPLY, seqId); err2 != nil {
    _write_err42 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err42 == nil && err2 != nil {
    _write_err42 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err42 == nil && err2 != nil {
    _write_err42 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err42 == nil && err2 != nil {
    _write_err42 = thrift.WrapTException(err2)
  }
  if _write_err42 != nil {
    return false, thrift.WrapTException(_write_err42)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Config
type JMXServiceConnectArgs struct {
  Config *JMXConfig `thrift:"config,1" db:"config" json:"config"`
}

func NewJMXServiceConnectArgs() *JMXServiceConnectArgs {
  return &JMXServiceConnectArgs{}
}

var JMXServiceConnectArgs_Config_DEFAULT *JMXConfig
func (p *JMXServiceConnectArgs) GetConfig() *JMXConfig {
  if !p.IsSetConfig() {
    return JMXServiceConnectArgs_Config_DEFAULT
  }
return p.Config
}
func (p *JMXServiceConnectArgs) IsSetConfig() bool {
  return p.Config != nil
}

func (p *JMXServiceConnectArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceConnectArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Config = &JMXConfig{}
  if err := p.Config.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *JMXServiceConnectArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "connect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceConnectArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "config", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err) }
  if err := p.Config.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err) }
  return err
}

func (p *JMXServiceConnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceConnectArgs(%+v)", *p)
}

// Attributes:
//  - ConnErr
//  - JmxErr
type JMXServiceConnectResult struct {
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceConnectResult() *JMXServiceConnectResult {
  return &JMXServiceConnectResult{}
}

var JMXServiceConnectResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceConnectResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceConnectResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceConnectResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceConnectResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceConnectResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceConnectResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceConnectResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceConnectResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceConnectResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceConnectResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceConnectResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "connect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceConnectResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin(ctx, "connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceConnectResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin(ctx, "jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceConnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceConnectResult(%+v)", *p)
}

type JMXServiceDisconnectArgs struct {
}

func NewJMXServiceDisconnectArgs() *JMXServiceDisconnectArgs {
  return &JMXServiceDisconnectArgs{}
}

func (p *JMXServiceDisconnectArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceDisconnectArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "disconnect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceDisconnectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceDisconnectArgs(%+v)", *p)
}

// Attributes:
//  - Err
type JMXServiceDisconnectResult struct {
  Err *JMXError `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewJMXServiceDisconnectResult() *JMXServiceDisconnectResult {
  return &JMXServiceDisconnectResult{}
}

var JMXServiceDisconnectResult_Err_DEFAULT *JMXError
func (p *JMXServiceDisconnectResult) GetErr() *JMXError {
  if !p.IsSetErr() {
    return JMXServiceDisconnectResult_Err_DEFAULT
  }
return p.Err
}
func (p *JMXServiceDisconnectResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *JMXServiceDisconnectResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceDisconnectResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &JMXError{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *JMXServiceDisconnectResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "disconnect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceDisconnectResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *JMXServiceDisconnectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceDisconnectResult(%+v)", *p)
}

type JMXServiceGetClientVersionArgs struct {
}

func NewJMXServiceGetClientVersionArgs() *JMXServiceGetClientVersionArgs {
  return &JMXServiceGetClientVersionArgs{}
}

func (p *JMXServiceGetClientVersionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetClientVersionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getClientVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetClientVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetClientVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type JMXServiceGetClientVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *JMXError `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewJMXServiceGetClientVersionResult() *JMXServiceGetClientVersionResult {
  return &JMXServiceGetClientVersionResult{}
}

var JMXServiceGetClientVersionResult_Success_DEFAULT string
func (p *JMXServiceGetClientVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return JMXServiceGetClientVersionResult_Success_DEFAULT
  }
return *p.Success
}
var JMXServiceGetClientVersionResult_Err_DEFAULT *JMXError
func (p *JMXServiceGetClientVersionResult) GetErr() *JMXError {
  if !p.IsSetErr() {
    return JMXServiceGetClientVersionResult_Err_DEFAULT
  }
return p.Err
}
func (p *JMXServiceGetClientVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceGetClientVersionResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *JMXServiceGetClientVersionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetClientVersionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *JMXServiceGetClientVersionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &JMXError{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *JMXServiceGetClientVersionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getClientVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetClientVersionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetClientVersionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetClientVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetClientVersionResult(%+v)", *p)
}

// Attributes:
//  - MBeanNamePattern
type JMXServiceQueryMBeanNamesArgs struct {
  MBeanNamePattern string `thrift:"mBeanNamePattern,1" db:"mBeanNamePattern" json:"mBeanNamePattern"`
}

func NewJMXServiceQueryMBeanNamesArgs() *JMXServiceQueryMBeanNamesArgs {
  return &JMXServiceQueryMBeanNamesArgs{}
}


func (p *JMXServiceQueryMBeanNamesArgs) GetMBeanNamePattern() string {
  return p.MBeanNamePattern
}
func (p *JMXServiceQueryMBeanNamesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanNamesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MBeanNamePattern = v
}
  return nil
}

func (p *JMXServiceQueryMBeanNamesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "queryMBeanNames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceQueryMBeanNamesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mBeanNamePattern", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mBeanNamePattern: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MBeanNamePattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mBeanNamePattern (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mBeanNamePattern: ", p), err) }
  return err
}

func (p *JMXServiceQueryMBeanNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceQueryMBeanNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceQueryMBeanNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceQueryMBeanNamesResult() *JMXServiceQueryMBeanNamesResult {
  return &JMXServiceQueryMBeanNamesResult{}
}

var JMXServiceQueryMBeanNamesResult_Success_DEFAULT []string

func (p *JMXServiceQueryMBeanNamesResult) GetSuccess() []string {
  return p.Success
}
var JMXServiceQueryMBeanNamesResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceQueryMBeanNamesResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceQueryMBeanNamesResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceQueryMBeanNamesResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceQueryMBeanNamesResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceQueryMBeanNamesResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceQueryMBeanNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceQueryMBeanNamesResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceQueryMBeanNamesResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceQueryMBeanNamesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanNamesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem44 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem44 = v
}
    p.Success = append(p.Success, _elem44)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanNamesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanNamesResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanNamesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "queryMBeanNames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceQueryMBeanNamesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanNamesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin(ctx, "connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanNamesResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin(ctx, "jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceQueryMBeanNamesResult(%+v)", *p)
}

// Attributes:
//  - MBeanName
type JMXServiceGetMBeanAttributeNamesArgs struct {
  MBeanName string `thrift:"mBeanName,1" db:"mBeanName" json:"mBeanName"`
}

func NewJMXServiceGetMBeanAttributeNamesArgs() *JMXServiceGetMBeanAttributeNamesArgs {
  return &JMXServiceGetMBeanAttributeNamesArgs{}
}


func (p *JMXServiceGetMBeanAttributeNamesArgs) GetMBeanName() string {
  return p.MBeanName
}
func (p *JMXServiceGetMBeanAttributeNamesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MBeanName = v
}
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMBeanAttributeNames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mBeanName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mBeanName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MBeanName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mBeanName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mBeanName: ", p), err) }
  return err
}

func (p *JMXServiceGetMBeanAttributeNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetMBeanAttributeNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceGetMBeanAttributeNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceGetMBeanAttributeNamesResult() *JMXServiceGetMBeanAttributeNamesResult {
  return &JMXServiceGetMBeanAttributeNamesResult{}
}

var JMXServiceGetMBeanAttributeNamesResult_Success_DEFAULT []string

func (p *JMXServiceGetMBeanAttributeNamesResult) GetSuccess() []string {
  return p.Success
}
var JMXServiceGetMBeanAttributeNamesResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceGetMBeanAttributeNamesResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceGetMBeanAttributeNamesResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceGetMBeanAttributeNamesResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceGetMBeanAttributeNamesResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceGetMBeanAttributeNamesResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceGetMBeanAttributeNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem45 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem45 = v
}
    p.Success = append(p.Success, _elem45)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMBeanAttributeNames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetMBeanAttributeNamesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributeNamesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin(ctx, "connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributeNamesResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin(ctx, "jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributeNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetMBeanAttributeNamesResult(%+v)", *p)
}

// Attributes:
//  - MBeanName
//  - Attributes
type JMXServiceGetMBeanAttributesArgs struct {
  MBeanName string `thrift:"mBeanName,1" db:"mBeanName" json:"mBeanName"`
  Attributes []string `thrift:"attributes,2" db:"attributes" json:"attributes"`
}

func NewJMXServiceGetMBeanAttributesArgs() *JMXServiceGetMBeanAttributesArgs {
  return &JMXServiceGetMBeanAttributesArgs{}
}


func (p *JMXServiceGetMBeanAttributesArgs) GetMBeanName() string {
  return p.MBeanName
}

func (p *JMXServiceGetMBeanAttributesArgs) GetAttributes() []string {
  return p.Attributes
}
func (p *JMXServiceGetMBeanAttributesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MBeanName = v
}
  return nil
}

func (p *JMXServiceGetMBeanAttributesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Attributes =  tSlice
  for i := 0; i < size; i ++ {
var _elem46 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem46 = v
}
    p.Attributes = append(p.Attributes, _elem46)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMBeanAttributes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetMBeanAttributesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mBeanName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mBeanName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MBeanName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mBeanName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mBeanName: ", p), err) }
  return err
}

func (p *JMXServiceGetMBeanAttributesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attributes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attributes: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Attributes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Attributes {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attributes: ", p), err) }
  return err
}

func (p *JMXServiceGetMBeanAttributesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetMBeanAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceGetMBeanAttributesResult struct {
  Success []*AttributeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceGetMBeanAttributesResult() *JMXServiceGetMBeanAttributesResult {
  return &JMXServiceGetMBeanAttributesResult{}
}

var JMXServiceGetMBeanAttributesResult_Success_DEFAULT []*AttributeResponse

func (p *JMXServiceGetMBeanAttributesResult) GetSuccess() []*AttributeResponse {
  return p.Success
}
var JMXServiceGetMBeanAttributesResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceGetMBeanAttributesResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceGetMBeanAttributesResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceGetMBeanAttributesResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceGetMBeanAttributesResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceGetMBeanAttributesResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceGetMBeanAttributesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceGetMBeanAttributesResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceGetMBeanAttributesResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceGetMBeanAttributesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AttributeResponse, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem47 := &AttributeResponse{}
    if err := _elem47.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem47), err)
    }
    p.Success = append(p.Success, _elem47)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceGetMBeanAttributesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMBeanAttributes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetMBeanAttributesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin(ctx, "connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributesResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin(ctx, "jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetMBeanAttributesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetMBeanAttributesResult(%+v)", *p)
}

// Attributes:
//  - MBeanNamePattern
//  - Attributes
type JMXServiceQueryMBeanAttributesArgs struct {
  MBeanNamePattern string `thrift:"mBeanNamePattern,1" db:"mBeanNamePattern" json:"mBeanNamePattern"`
  Attributes []string `thrift:"attributes,2" db:"attributes" json:"attributes"`
}

func NewJMXServiceQueryMBeanAttributesArgs() *JMXServiceQueryMBeanAttributesArgs {
  return &JMXServiceQueryMBeanAttributesArgs{}
}


func (p *JMXServiceQueryMBeanAttributesArgs) GetMBeanNamePattern() string {
  return p.MBeanNamePattern
}

func (p *JMXServiceQueryMBeanAttributesArgs) GetAttributes() []string {
  return p.Attributes
}
func (p *JMXServiceQueryMBeanAttributesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MBeanNamePattern = v
}
  return nil
}

func (p *JMXServiceQueryMBeanAttributesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Attributes =  tSlice
  for i := 0; i < size; i ++ {
var _elem48 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem48 = v
}
    p.Attributes = append(p.Attributes, _elem48)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "queryMBeanAttributes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mBeanNamePattern", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mBeanNamePattern: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MBeanNamePattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mBeanNamePattern (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mBeanNamePattern: ", p), err) }
  return err
}

func (p *JMXServiceQueryMBeanAttributesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attributes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attributes: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Attributes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Attributes {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attributes: ", p), err) }
  return err
}

func (p *JMXServiceQueryMBeanAttributesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceQueryMBeanAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - ConnErr
//  - JmxErr
type JMXServiceQueryMBeanAttributesResult struct {
  Success []*AttributeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  ConnErr *JMXConnectionError `thrift:"connErr,1" db:"connErr" json:"connErr,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,2" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceQueryMBeanAttributesResult() *JMXServiceQueryMBeanAttributesResult {
  return &JMXServiceQueryMBeanAttributesResult{}
}

var JMXServiceQueryMBeanAttributesResult_Success_DEFAULT []*AttributeResponse

func (p *JMXServiceQueryMBeanAttributesResult) GetSuccess() []*AttributeResponse {
  return p.Success
}
var JMXServiceQueryMBeanAttributesResult_ConnErr_DEFAULT *JMXConnectionError
func (p *JMXServiceQueryMBeanAttributesResult) GetConnErr() *JMXConnectionError {
  if !p.IsSetConnErr() {
    return JMXServiceQueryMBeanAttributesResult_ConnErr_DEFAULT
  }
return p.ConnErr
}
var JMXServiceQueryMBeanAttributesResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceQueryMBeanAttributesResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceQueryMBeanAttributesResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceQueryMBeanAttributesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceQueryMBeanAttributesResult) IsSetConnErr() bool {
  return p.ConnErr != nil
}

func (p *JMXServiceQueryMBeanAttributesResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceQueryMBeanAttributesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AttributeResponse, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem49 := &AttributeResponse{}
    if err := _elem49.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
    }
    p.Success = append(p.Success, _elem49)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ConnErr = &JMXConnectionError{}
  if err := p.ConnErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConnErr), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "queryMBeanAttributes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceQueryMBeanAttributesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanAttributesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetConnErr() {
    if err := oprot.WriteFieldBegin(ctx, "connErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connErr: ", p), err) }
    if err := p.ConnErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConnErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanAttributesResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin(ctx, "jmxErr", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceQueryMBeanAttributesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceQueryMBeanAttributesResult(%+v)", *p)
}

type JMXServiceGetInternalStatsArgs struct {
}

func NewJMXServiceGetInternalStatsArgs() *JMXServiceGetInternalStatsArgs {
  return &JMXServiceGetInternalStatsArgs{}
}

func (p *JMXServiceGetInternalStatsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetInternalStatsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getInternalStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetInternalStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetInternalStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - JmxErr
type JMXServiceGetInternalStatsResult struct {
  Success []*InternalStat `thrift:"success,0" db:"success" json:"success,omitempty"`
  JmxErr *JMXError `thrift:"jmxErr,1" db:"jmxErr" json:"jmxErr,omitempty"`
}

func NewJMXServiceGetInternalStatsResult() *JMXServiceGetInternalStatsResult {
  return &JMXServiceGetInternalStatsResult{}
}

var JMXServiceGetInternalStatsResult_Success_DEFAULT []*InternalStat

func (p *JMXServiceGetInternalStatsResult) GetSuccess() []*InternalStat {
  return p.Success
}
var JMXServiceGetInternalStatsResult_JmxErr_DEFAULT *JMXError
func (p *JMXServiceGetInternalStatsResult) GetJmxErr() *JMXError {
  if !p.IsSetJmxErr() {
    return JMXServiceGetInternalStatsResult_JmxErr_DEFAULT
  }
return p.JmxErr
}
func (p *JMXServiceGetInternalStatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *JMXServiceGetInternalStatsResult) IsSetJmxErr() bool {
  return p.JmxErr != nil
}

func (p *JMXServiceGetInternalStatsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JMXServiceGetInternalStatsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*InternalStat, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem50 := &InternalStat{}
    if err := _elem50.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
    }
    p.Success = append(p.Success, _elem50)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JMXServiceGetInternalStatsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.JmxErr = &JMXError{}
  if err := p.JmxErr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JmxErr), err)
  }
  return nil
}

func (p *JMXServiceGetInternalStatsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getInternalStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JMXServiceGetInternalStatsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetInternalStatsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJmxErr() {
    if err := oprot.WriteFieldBegin(ctx, "jmxErr", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jmxErr: ", p), err) }
    if err := p.JmxErr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JmxErr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jmxErr: ", p), err) }
  }
  return err
}

func (p *JMXServiceGetInternalStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JMXServiceGetInternalStatsResult(%+v)", *p)
}


