/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.newrelic.nrjmx.v2.nrprotocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class JMXService {

  public interface Iface {

    public void connect(JMXConfig config) throws JMXConnectionError, JMXError, org.apache.thrift.TException;

    public void disconnect() throws JMXError, org.apache.thrift.TException;

    public java.lang.String getClientVersion() throws JMXError, org.apache.thrift.TException;

    public java.util.List<java.lang.String> queryMBeanNames(java.lang.String mBeanNamePattern) throws JMXConnectionError, JMXError, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getMBeanAttributeNames(java.lang.String mBeanName) throws JMXConnectionError, JMXError, org.apache.thrift.TException;

    public java.util.List<AttributeResponse> getMBeanAttributes(java.lang.String mBeanName, java.util.List<java.lang.String> attributes) throws JMXConnectionError, JMXError, org.apache.thrift.TException;

    public java.util.List<AttributeResponse> queryMBeanAttributes(java.lang.String mBeanNamePattern, java.util.List<java.lang.String> attributes) throws JMXConnectionError, JMXError, org.apache.thrift.TException;

    public java.util.List<InternalStat> getInternalStats() throws JMXError, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void connect(JMXConfig config, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void disconnect(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getClientVersion(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void queryMBeanNames(java.lang.String mBeanNamePattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void getMBeanAttributeNames(java.lang.String mBeanName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void getMBeanAttributes(java.lang.String mBeanName, java.util.List<java.lang.String> attributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>> resultHandler) throws org.apache.thrift.TException;

    public void queryMBeanAttributes(java.lang.String mBeanNamePattern, java.util.List<java.lang.String> attributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>> resultHandler) throws org.apache.thrift.TException;

    public void getInternalStats(org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalStat>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public void connect(JMXConfig config) throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      send_connect(config);
      recv_connect();
    }

    public void send_connect(JMXConfig config) throws org.apache.thrift.TException
    {
      connect_args args = new connect_args();
      args.setConfig(config);
      sendBase("connect", args);
    }

    public void recv_connect() throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      connect_result result = new connect_result();
      receiveBase(result, "connect");
      if (result.connErr != null) {
        throw result.connErr;
      }
      if (result.jmxErr != null) {
        throw result.jmxErr;
      }
      return;
    }

    @Override
    public void disconnect() throws JMXError, org.apache.thrift.TException
    {
      send_disconnect();
      recv_disconnect();
    }

    public void send_disconnect() throws org.apache.thrift.TException
    {
      disconnect_args args = new disconnect_args();
      sendBase("disconnect", args);
    }

    public void recv_disconnect() throws JMXError, org.apache.thrift.TException
    {
      disconnect_result result = new disconnect_result();
      receiveBase(result, "disconnect");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    @Override
    public java.lang.String getClientVersion() throws JMXError, org.apache.thrift.TException
    {
      send_getClientVersion();
      return recv_getClientVersion();
    }

    public void send_getClientVersion() throws org.apache.thrift.TException
    {
      getClientVersion_args args = new getClientVersion_args();
      sendBase("getClientVersion", args);
    }

    public java.lang.String recv_getClientVersion() throws JMXError, org.apache.thrift.TException
    {
      getClientVersion_result result = new getClientVersion_result();
      receiveBase(result, "getClientVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClientVersion failed: unknown result");
    }

    @Override
    public java.util.List<java.lang.String> queryMBeanNames(java.lang.String mBeanNamePattern) throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      send_queryMBeanNames(mBeanNamePattern);
      return recv_queryMBeanNames();
    }

    public void send_queryMBeanNames(java.lang.String mBeanNamePattern) throws org.apache.thrift.TException
    {
      queryMBeanNames_args args = new queryMBeanNames_args();
      args.setMBeanNamePattern(mBeanNamePattern);
      sendBase("queryMBeanNames", args);
    }

    public java.util.List<java.lang.String> recv_queryMBeanNames() throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      queryMBeanNames_result result = new queryMBeanNames_result();
      receiveBase(result, "queryMBeanNames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.connErr != null) {
        throw result.connErr;
      }
      if (result.jmxErr != null) {
        throw result.jmxErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMBeanNames failed: unknown result");
    }

    @Override
    public java.util.List<java.lang.String> getMBeanAttributeNames(java.lang.String mBeanName) throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      send_getMBeanAttributeNames(mBeanName);
      return recv_getMBeanAttributeNames();
    }

    public void send_getMBeanAttributeNames(java.lang.String mBeanName) throws org.apache.thrift.TException
    {
      getMBeanAttributeNames_args args = new getMBeanAttributeNames_args();
      args.setMBeanName(mBeanName);
      sendBase("getMBeanAttributeNames", args);
    }

    public java.util.List<java.lang.String> recv_getMBeanAttributeNames() throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      getMBeanAttributeNames_result result = new getMBeanAttributeNames_result();
      receiveBase(result, "getMBeanAttributeNames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.connErr != null) {
        throw result.connErr;
      }
      if (result.jmxErr != null) {
        throw result.jmxErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMBeanAttributeNames failed: unknown result");
    }

    @Override
    public java.util.List<AttributeResponse> getMBeanAttributes(java.lang.String mBeanName, java.util.List<java.lang.String> attributes) throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      send_getMBeanAttributes(mBeanName, attributes);
      return recv_getMBeanAttributes();
    }

    public void send_getMBeanAttributes(java.lang.String mBeanName, java.util.List<java.lang.String> attributes) throws org.apache.thrift.TException
    {
      getMBeanAttributes_args args = new getMBeanAttributes_args();
      args.setMBeanName(mBeanName);
      args.setAttributes(attributes);
      sendBase("getMBeanAttributes", args);
    }

    public java.util.List<AttributeResponse> recv_getMBeanAttributes() throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      getMBeanAttributes_result result = new getMBeanAttributes_result();
      receiveBase(result, "getMBeanAttributes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.connErr != null) {
        throw result.connErr;
      }
      if (result.jmxErr != null) {
        throw result.jmxErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMBeanAttributes failed: unknown result");
    }

    @Override
    public java.util.List<AttributeResponse> queryMBeanAttributes(java.lang.String mBeanNamePattern, java.util.List<java.lang.String> attributes) throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      send_queryMBeanAttributes(mBeanNamePattern, attributes);
      return recv_queryMBeanAttributes();
    }

    public void send_queryMBeanAttributes(java.lang.String mBeanNamePattern, java.util.List<java.lang.String> attributes) throws org.apache.thrift.TException
    {
      queryMBeanAttributes_args args = new queryMBeanAttributes_args();
      args.setMBeanNamePattern(mBeanNamePattern);
      args.setAttributes(attributes);
      sendBase("queryMBeanAttributes", args);
    }

    public java.util.List<AttributeResponse> recv_queryMBeanAttributes() throws JMXConnectionError, JMXError, org.apache.thrift.TException
    {
      queryMBeanAttributes_result result = new queryMBeanAttributes_result();
      receiveBase(result, "queryMBeanAttributes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.connErr != null) {
        throw result.connErr;
      }
      if (result.jmxErr != null) {
        throw result.jmxErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMBeanAttributes failed: unknown result");
    }

    @Override
    public java.util.List<InternalStat> getInternalStats() throws JMXError, org.apache.thrift.TException
    {
      send_getInternalStats();
      return recv_getInternalStats();
    }

    public void send_getInternalStats() throws org.apache.thrift.TException
    {
      getInternalStats_args args = new getInternalStats_args();
      sendBase("getInternalStats", args);
    }

    public java.util.List<InternalStat> recv_getInternalStats() throws JMXError, org.apache.thrift.TException
    {
      getInternalStats_result result = new getInternalStats_result();
      receiveBase(result, "getInternalStats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.jmxErr != null) {
        throw result.jmxErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInternalStats failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void connect(JMXConfig config, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connect_call method_call = new connect_call(config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connect_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private JMXConfig config;
      public connect_call(JMXConfig config, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.config = config;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connect_args args = new connect_args();
        args.setConfig(config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws JMXConnectionError, JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_connect();
        return null;
      }
    }

    @Override
    public void disconnect(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disconnect_call method_call = new disconnect_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disconnect_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public disconnect_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disconnect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disconnect_args args = new disconnect_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_disconnect();
        return null;
      }
    }

    @Override
    public void getClientVersion(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClientVersion_call method_call = new getClientVersion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClientVersion_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public getClientVersion_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClientVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClientVersion_args args = new getClientVersion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClientVersion();
      }
    }

    @Override
    public void queryMBeanNames(java.lang.String mBeanNamePattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMBeanNames_call method_call = new queryMBeanNames_call(mBeanNamePattern, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMBeanNames_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String mBeanNamePattern;
      public queryMBeanNames_call(java.lang.String mBeanNamePattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mBeanNamePattern = mBeanNamePattern;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMBeanNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMBeanNames_args args = new queryMBeanNames_args();
        args.setMBeanNamePattern(mBeanNamePattern);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<java.lang.String> getResult() throws JMXConnectionError, JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMBeanNames();
      }
    }

    @Override
    public void getMBeanAttributeNames(java.lang.String mBeanName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMBeanAttributeNames_call method_call = new getMBeanAttributeNames_call(mBeanName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMBeanAttributeNames_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String mBeanName;
      public getMBeanAttributeNames_call(java.lang.String mBeanName, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mBeanName = mBeanName;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMBeanAttributeNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMBeanAttributeNames_args args = new getMBeanAttributeNames_args();
        args.setMBeanName(mBeanName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<java.lang.String> getResult() throws JMXConnectionError, JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMBeanAttributeNames();
      }
    }

    @Override
    public void getMBeanAttributes(java.lang.String mBeanName, java.util.List<java.lang.String> attributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMBeanAttributes_call method_call = new getMBeanAttributes_call(mBeanName, attributes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMBeanAttributes_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AttributeResponse>> {
      private java.lang.String mBeanName;
      private java.util.List<java.lang.String> attributes;
      public getMBeanAttributes_call(java.lang.String mBeanName, java.util.List<java.lang.String> attributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mBeanName = mBeanName;
        this.attributes = attributes;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMBeanAttributes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMBeanAttributes_args args = new getMBeanAttributes_args();
        args.setMBeanName(mBeanName);
        args.setAttributes(attributes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<AttributeResponse> getResult() throws JMXConnectionError, JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMBeanAttributes();
      }
    }

    @Override
    public void queryMBeanAttributes(java.lang.String mBeanNamePattern, java.util.List<java.lang.String> attributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMBeanAttributes_call method_call = new queryMBeanAttributes_call(mBeanNamePattern, attributes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMBeanAttributes_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<AttributeResponse>> {
      private java.lang.String mBeanNamePattern;
      private java.util.List<java.lang.String> attributes;
      public queryMBeanAttributes_call(java.lang.String mBeanNamePattern, java.util.List<java.lang.String> attributes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mBeanNamePattern = mBeanNamePattern;
        this.attributes = attributes;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMBeanAttributes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMBeanAttributes_args args = new queryMBeanAttributes_args();
        args.setMBeanNamePattern(mBeanNamePattern);
        args.setAttributes(attributes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<AttributeResponse> getResult() throws JMXConnectionError, JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMBeanAttributes();
      }
    }

    @Override
    public void getInternalStats(org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalStat>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInternalStats_call method_call = new getInternalStats_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInternalStats_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<InternalStat>> {
      public getInternalStats_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalStat>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInternalStats", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInternalStats_args args = new getInternalStats_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<InternalStat> getResult() throws JMXError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInternalStats();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("connect", new connect());
      processMap.put("disconnect", new disconnect());
      processMap.put("getClientVersion", new getClientVersion());
      processMap.put("queryMBeanNames", new queryMBeanNames());
      processMap.put("getMBeanAttributeNames", new getMBeanAttributeNames());
      processMap.put("getMBeanAttributes", new getMBeanAttributes());
      processMap.put("queryMBeanAttributes", new queryMBeanAttributes());
      processMap.put("getInternalStats", new getInternalStats());
      return processMap;
    }

    public static class connect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connect_args> {
      public connect() {
        super("connect");
      }

      @Override
      public connect_args getEmptyArgsInstance() {
        return new connect_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public connect_result getResult(I iface, connect_args args) throws org.apache.thrift.TException {
        connect_result result = new connect_result();
        try {
          iface.connect(args.config);
        } catch (JMXConnectionError connErr) {
          result.connErr = connErr;
        } catch (JMXError jmxErr) {
          result.jmxErr = jmxErr;
        }
        return result;
      }
    }

    public static class disconnect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disconnect_args> {
      public disconnect() {
        super("disconnect");
      }

      @Override
      public disconnect_args getEmptyArgsInstance() {
        return new disconnect_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public disconnect_result getResult(I iface, disconnect_args args) throws org.apache.thrift.TException {
        disconnect_result result = new disconnect_result();
        try {
          iface.disconnect();
        } catch (JMXError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getClientVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClientVersion_args> {
      public getClientVersion() {
        super("getClientVersion");
      }

      @Override
      public getClientVersion_args getEmptyArgsInstance() {
        return new getClientVersion_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getClientVersion_result getResult(I iface, getClientVersion_args args) throws org.apache.thrift.TException {
        getClientVersion_result result = new getClientVersion_result();
        try {
          result.success = iface.getClientVersion();
        } catch (JMXError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class queryMBeanNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMBeanNames_args> {
      public queryMBeanNames() {
        super("queryMBeanNames");
      }

      @Override
      public queryMBeanNames_args getEmptyArgsInstance() {
        return new queryMBeanNames_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public queryMBeanNames_result getResult(I iface, queryMBeanNames_args args) throws org.apache.thrift.TException {
        queryMBeanNames_result result = new queryMBeanNames_result();
        try {
          result.success = iface.queryMBeanNames(args.mBeanNamePattern);
        } catch (JMXConnectionError connErr) {
          result.connErr = connErr;
        } catch (JMXError jmxErr) {
          result.jmxErr = jmxErr;
        }
        return result;
      }
    }

    public static class getMBeanAttributeNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMBeanAttributeNames_args> {
      public getMBeanAttributeNames() {
        super("getMBeanAttributeNames");
      }

      @Override
      public getMBeanAttributeNames_args getEmptyArgsInstance() {
        return new getMBeanAttributeNames_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getMBeanAttributeNames_result getResult(I iface, getMBeanAttributeNames_args args) throws org.apache.thrift.TException {
        getMBeanAttributeNames_result result = new getMBeanAttributeNames_result();
        try {
          result.success = iface.getMBeanAttributeNames(args.mBeanName);
        } catch (JMXConnectionError connErr) {
          result.connErr = connErr;
        } catch (JMXError jmxErr) {
          result.jmxErr = jmxErr;
        }
        return result;
      }
    }

    public static class getMBeanAttributes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMBeanAttributes_args> {
      public getMBeanAttributes() {
        super("getMBeanAttributes");
      }

      @Override
      public getMBeanAttributes_args getEmptyArgsInstance() {
        return new getMBeanAttributes_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getMBeanAttributes_result getResult(I iface, getMBeanAttributes_args args) throws org.apache.thrift.TException {
        getMBeanAttributes_result result = new getMBeanAttributes_result();
        try {
          result.success = iface.getMBeanAttributes(args.mBeanName, args.attributes);
        } catch (JMXConnectionError connErr) {
          result.connErr = connErr;
        } catch (JMXError jmxErr) {
          result.jmxErr = jmxErr;
        }
        return result;
      }
    }

    public static class queryMBeanAttributes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMBeanAttributes_args> {
      public queryMBeanAttributes() {
        super("queryMBeanAttributes");
      }

      @Override
      public queryMBeanAttributes_args getEmptyArgsInstance() {
        return new queryMBeanAttributes_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public queryMBeanAttributes_result getResult(I iface, queryMBeanAttributes_args args) throws org.apache.thrift.TException {
        queryMBeanAttributes_result result = new queryMBeanAttributes_result();
        try {
          result.success = iface.queryMBeanAttributes(args.mBeanNamePattern, args.attributes);
        } catch (JMXConnectionError connErr) {
          result.connErr = connErr;
        } catch (JMXError jmxErr) {
          result.jmxErr = jmxErr;
        }
        return result;
      }
    }

    public static class getInternalStats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInternalStats_args> {
      public getInternalStats() {
        super("getInternalStats");
      }

      @Override
      public getInternalStats_args getEmptyArgsInstance() {
        return new getInternalStats_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getInternalStats_result getResult(I iface, getInternalStats_args args) throws org.apache.thrift.TException {
        getInternalStats_result result = new getInternalStats_result();
        try {
          result.success = iface.getInternalStats();
        } catch (JMXError jmxErr) {
          result.jmxErr = jmxErr;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("connect", new connect());
      processMap.put("disconnect", new disconnect());
      processMap.put("getClientVersion", new getClientVersion());
      processMap.put("queryMBeanNames", new queryMBeanNames());
      processMap.put("getMBeanAttributeNames", new getMBeanAttributeNames());
      processMap.put("getMBeanAttributes", new getMBeanAttributes());
      processMap.put("queryMBeanAttributes", new queryMBeanAttributes());
      processMap.put("getInternalStats", new getInternalStats());
      return processMap;
    }

    public static class connect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connect_args, Void> {
      public connect() {
        super("connect");
      }

      @Override
      public connect_args getEmptyArgsInstance() {
        return new connect_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            connect_result result = new connect_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            connect_result result = new connect_result();
            if (e instanceof JMXConnectionError) {
              result.connErr = (JMXConnectionError) e;
              result.setConnErrIsSet(true);
              msg = result;
            } else if (e instanceof JMXError) {
              result.jmxErr = (JMXError) e;
              result.setJmxErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, connect_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.connect(args.config,resultHandler);
      }
    }

    public static class disconnect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disconnect_args, Void> {
      public disconnect() {
        super("disconnect");
      }

      @Override
      public disconnect_args getEmptyArgsInstance() {
        return new disconnect_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            disconnect_result result = new disconnect_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            disconnect_result result = new disconnect_result();
            if (e instanceof JMXError) {
              result.err = (JMXError) e;
              result.setErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, disconnect_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.disconnect(resultHandler);
      }
    }

    public static class getClientVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClientVersion_args, java.lang.String> {
      public getClientVersion() {
        super("getClientVersion");
      }

      @Override
      public getClientVersion_args getEmptyArgsInstance() {
        return new getClientVersion_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            getClientVersion_result result = new getClientVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getClientVersion_result result = new getClientVersion_result();
            if (e instanceof JMXError) {
              result.err = (JMXError) e;
              result.setErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getClientVersion_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getClientVersion(resultHandler);
      }
    }

    public static class queryMBeanNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMBeanNames_args, java.util.List<java.lang.String>> {
      public queryMBeanNames() {
        super("queryMBeanNames");
      }

      @Override
      public queryMBeanNames_args getEmptyArgsInstance() {
        return new queryMBeanNames_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          @Override
          public void onComplete(java.util.List<java.lang.String> o) {
            queryMBeanNames_result result = new queryMBeanNames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryMBeanNames_result result = new queryMBeanNames_result();
            if (e instanceof JMXConnectionError) {
              result.connErr = (JMXConnectionError) e;
              result.setConnErrIsSet(true);
              msg = result;
            } else if (e instanceof JMXError) {
              result.jmxErr = (JMXError) e;
              result.setJmxErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, queryMBeanNames_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.queryMBeanNames(args.mBeanNamePattern,resultHandler);
      }
    }

    public static class getMBeanAttributeNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMBeanAttributeNames_args, java.util.List<java.lang.String>> {
      public getMBeanAttributeNames() {
        super("getMBeanAttributeNames");
      }

      @Override
      public getMBeanAttributeNames_args getEmptyArgsInstance() {
        return new getMBeanAttributeNames_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          @Override
          public void onComplete(java.util.List<java.lang.String> o) {
            getMBeanAttributeNames_result result = new getMBeanAttributeNames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMBeanAttributeNames_result result = new getMBeanAttributeNames_result();
            if (e instanceof JMXConnectionError) {
              result.connErr = (JMXConnectionError) e;
              result.setConnErrIsSet(true);
              msg = result;
            } else if (e instanceof JMXError) {
              result.jmxErr = (JMXError) e;
              result.setJmxErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getMBeanAttributeNames_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getMBeanAttributeNames(args.mBeanName,resultHandler);
      }
    }

    public static class getMBeanAttributes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMBeanAttributes_args, java.util.List<AttributeResponse>> {
      public getMBeanAttributes() {
        super("getMBeanAttributes");
      }

      @Override
      public getMBeanAttributes_args getEmptyArgsInstance() {
        return new getMBeanAttributes_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>>() { 
          @Override
          public void onComplete(java.util.List<AttributeResponse> o) {
            getMBeanAttributes_result result = new getMBeanAttributes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMBeanAttributes_result result = new getMBeanAttributes_result();
            if (e instanceof JMXConnectionError) {
              result.connErr = (JMXConnectionError) e;
              result.setConnErrIsSet(true);
              msg = result;
            } else if (e instanceof JMXError) {
              result.jmxErr = (JMXError) e;
              result.setJmxErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getMBeanAttributes_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.getMBeanAttributes(args.mBeanName, args.attributes,resultHandler);
      }
    }

    public static class queryMBeanAttributes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMBeanAttributes_args, java.util.List<AttributeResponse>> {
      public queryMBeanAttributes() {
        super("queryMBeanAttributes");
      }

      @Override
      public queryMBeanAttributes_args getEmptyArgsInstance() {
        return new queryMBeanAttributes_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>>() { 
          @Override
          public void onComplete(java.util.List<AttributeResponse> o) {
            queryMBeanAttributes_result result = new queryMBeanAttributes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryMBeanAttributes_result result = new queryMBeanAttributes_result();
            if (e instanceof JMXConnectionError) {
              result.connErr = (JMXConnectionError) e;
              result.setConnErrIsSet(true);
              msg = result;
            } else if (e instanceof JMXError) {
              result.jmxErr = (JMXError) e;
              result.setJmxErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, queryMBeanAttributes_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<AttributeResponse>> resultHandler) throws org.apache.thrift.TException {
        iface.queryMBeanAttributes(args.mBeanNamePattern, args.attributes,resultHandler);
      }
    }

    public static class getInternalStats<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInternalStats_args, java.util.List<InternalStat>> {
      public getInternalStats() {
        super("getInternalStats");
      }

      @Override
      public getInternalStats_args getEmptyArgsInstance() {
        return new getInternalStats_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalStat>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalStat>>() { 
          @Override
          public void onComplete(java.util.List<InternalStat> o) {
            getInternalStats_result result = new getInternalStats_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getInternalStats_result result = new getInternalStats_result();
            if (e instanceof JMXError) {
              result.jmxErr = (JMXError) e;
              result.setJmxErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getInternalStats_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalStat>> resultHandler) throws org.apache.thrift.TException {
        iface.getInternalStats(resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class connect_args implements org.apache.thrift.TBase<connect_args, connect_args._Fields>, java.io.Serializable, Cloneable, Comparable<connect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_args");

    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable JMXConfig config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG((short)1, "config");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG
            return CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConfig.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_args.class, metaDataMap);
    }

    public connect_args() {
    }

    public connect_args(
      JMXConfig config)
    {
      this();
      this.config = config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_args(connect_args other) {
      if (other.isSetConfig()) {
        this.config = new JMXConfig(other.config);
      }
    }

    @Override
    public connect_args deepCopy() {
      return new connect_args(this);
    }

    @Override
    public void clear() {
      this.config = null;
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConfig getConfig() {
      return this.config;
    }

    public connect_args setConfig(@org.apache.thrift.annotation.Nullable JMXConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((JMXConfig)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG:
        return getConfig();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONFIG:
        return isSetConfig();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connect_args)
        return this.equals((connect_args)that);
      return false;
    }

    public boolean equals(connect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConfig()) ? 131071 : 524287);
      if (isSetConfig())
        hashCode = hashCode * 8191 + config.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(connect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetConfig(), other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_args(");
      boolean first = true;

      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (config != null) {
        config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_argsStandardScheme getScheme() {
        return new connect_argsStandardScheme();
      }
    }

    private static class connect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new JMXConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_argsTupleScheme getScheme() {
        return new connect_argsTupleScheme();
      }
    }

    private static class connect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConfig()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.config = new JMXConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class connect_result implements org.apache.thrift.TBase<connect_result, connect_result._Fields>, java.io.Serializable, Cloneable, Comparable<connect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_result");

    private static final org.apache.thrift.protocol.TField CONN_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("connErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField JMX_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("jmxErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable JMXConnectionError connErr; // required
    public @org.apache.thrift.annotation.Nullable JMXError jmxErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONN_ERR((short)1, "connErr"),
      JMX_ERR((short)2, "jmxErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONN_ERR
            return CONN_ERR;
          case 2: // JMX_ERR
            return JMX_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONN_ERR, new org.apache.thrift.meta_data.FieldMetaData("connErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConnectionError.class)));
      tmpMap.put(_Fields.JMX_ERR, new org.apache.thrift.meta_data.FieldMetaData("jmxErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_result.class, metaDataMap);
    }

    public connect_result() {
    }

    public connect_result(
      JMXConnectionError connErr,
      JMXError jmxErr)
    {
      this();
      this.connErr = connErr;
      this.jmxErr = jmxErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_result(connect_result other) {
      if (other.isSetConnErr()) {
        this.connErr = new JMXConnectionError(other.connErr);
      }
      if (other.isSetJmxErr()) {
        this.jmxErr = new JMXError(other.jmxErr);
      }
    }

    @Override
    public connect_result deepCopy() {
      return new connect_result(this);
    }

    @Override
    public void clear() {
      this.connErr = null;
      this.jmxErr = null;
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConnectionError getConnErr() {
      return this.connErr;
    }

    public connect_result setConnErr(@org.apache.thrift.annotation.Nullable JMXConnectionError connErr) {
      this.connErr = connErr;
      return this;
    }

    public void unsetConnErr() {
      this.connErr = null;
    }

    /** Returns true if field connErr is set (has been assigned a value) and false otherwise */
    public boolean isSetConnErr() {
      return this.connErr != null;
    }

    public void setConnErrIsSet(boolean value) {
      if (!value) {
        this.connErr = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getJmxErr() {
      return this.jmxErr;
    }

    public connect_result setJmxErr(@org.apache.thrift.annotation.Nullable JMXError jmxErr) {
      this.jmxErr = jmxErr;
      return this;
    }

    public void unsetJmxErr() {
      this.jmxErr = null;
    }

    /** Returns true if field jmxErr is set (has been assigned a value) and false otherwise */
    public boolean isSetJmxErr() {
      return this.jmxErr != null;
    }

    public void setJmxErrIsSet(boolean value) {
      if (!value) {
        this.jmxErr = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CONN_ERR:
        if (value == null) {
          unsetConnErr();
        } else {
          setConnErr((JMXConnectionError)value);
        }
        break;

      case JMX_ERR:
        if (value == null) {
          unsetJmxErr();
        } else {
          setJmxErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONN_ERR:
        return getConnErr();

      case JMX_ERR:
        return getJmxErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONN_ERR:
        return isSetConnErr();
      case JMX_ERR:
        return isSetJmxErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connect_result)
        return this.equals((connect_result)that);
      return false;
    }

    public boolean equals(connect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connErr = true && this.isSetConnErr();
      boolean that_present_connErr = true && that.isSetConnErr();
      if (this_present_connErr || that_present_connErr) {
        if (!(this_present_connErr && that_present_connErr))
          return false;
        if (!this.connErr.equals(that.connErr))
          return false;
      }

      boolean this_present_jmxErr = true && this.isSetJmxErr();
      boolean that_present_jmxErr = true && that.isSetJmxErr();
      if (this_present_jmxErr || that_present_jmxErr) {
        if (!(this_present_jmxErr && that_present_jmxErr))
          return false;
        if (!this.jmxErr.equals(that.jmxErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConnErr()) ? 131071 : 524287);
      if (isSetConnErr())
        hashCode = hashCode * 8191 + connErr.hashCode();

      hashCode = hashCode * 8191 + ((isSetJmxErr()) ? 131071 : 524287);
      if (isSetJmxErr())
        hashCode = hashCode * 8191 + jmxErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(connect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetConnErr(), other.isSetConnErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connErr, other.connErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetJmxErr(), other.isSetJmxErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJmxErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jmxErr, other.jmxErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_result(");
      boolean first = true;

      sb.append("connErr:");
      if (this.connErr == null) {
        sb.append("null");
      } else {
        sb.append(this.connErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jmxErr:");
      if (this.jmxErr == null) {
        sb.append("null");
      } else {
        sb.append(this.jmxErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_resultStandardScheme getScheme() {
        return new connect_resultStandardScheme();
      }
    }

    private static class connect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONN_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connErr = new JMXConnectionError();
                struct.connErr.read(iprot);
                struct.setConnErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JMX_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jmxErr = new JMXError();
                struct.jmxErr.read(iprot);
                struct.setJmxErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connErr != null) {
          oprot.writeFieldBegin(CONN_ERR_FIELD_DESC);
          struct.connErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.jmxErr != null) {
          oprot.writeFieldBegin(JMX_ERR_FIELD_DESC);
          struct.jmxErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_resultTupleScheme getScheme() {
        return new connect_resultTupleScheme();
      }
    }

    private static class connect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnErr()) {
          optionals.set(0);
        }
        if (struct.isSetJmxErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetConnErr()) {
          struct.connErr.write(oprot);
        }
        if (struct.isSetJmxErr()) {
          struct.jmxErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.connErr = new JMXConnectionError();
          struct.connErr.read(iprot);
          struct.setConnErrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jmxErr = new JMXError();
          struct.jmxErr.read(iprot);
          struct.setJmxErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class disconnect_args implements org.apache.thrift.TBase<disconnect_args, disconnect_args._Fields>, java.io.Serializable, Cloneable, Comparable<disconnect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnect_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new disconnect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new disconnect_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnect_args.class, metaDataMap);
    }

    public disconnect_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnect_args(disconnect_args other) {
    }

    @Override
    public disconnect_args deepCopy() {
      return new disconnect_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof disconnect_args)
        return this.equals((disconnect_args)that);
      return false;
    }

    public boolean equals(disconnect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(disconnect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("disconnect_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public disconnect_argsStandardScheme getScheme() {
        return new disconnect_argsStandardScheme();
      }
    }

    private static class disconnect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<disconnect_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public disconnect_argsTupleScheme getScheme() {
        return new disconnect_argsTupleScheme();
      }
    }

    private static class disconnect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<disconnect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class disconnect_result implements org.apache.thrift.TBase<disconnect_result, disconnect_result._Fields>, java.io.Serializable, Cloneable, Comparable<disconnect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnect_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new disconnect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new disconnect_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable JMXError err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnect_result.class, metaDataMap);
    }

    public disconnect_result() {
    }

    public disconnect_result(
      JMXError err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnect_result(disconnect_result other) {
      if (other.isSetErr()) {
        this.err = new JMXError(other.err);
      }
    }

    @Override
    public disconnect_result deepCopy() {
      return new disconnect_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getErr() {
      return this.err;
    }

    public disconnect_result setErr(@org.apache.thrift.annotation.Nullable JMXError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof disconnect_result)
        return this.equals((disconnect_result)that);
      return false;
    }

    public boolean equals(disconnect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(disconnect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetErr(), other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("disconnect_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public disconnect_resultStandardScheme getScheme() {
        return new disconnect_resultStandardScheme();
      }
    }

    private static class disconnect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<disconnect_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new JMXError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public disconnect_resultTupleScheme getScheme() {
        return new disconnect_resultTupleScheme();
      }
    }

    private static class disconnect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<disconnect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new JMXError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getClientVersion_args implements org.apache.thrift.TBase<getClientVersion_args, getClientVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClientVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientVersion_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getClientVersion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getClientVersion_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientVersion_args.class, metaDataMap);
    }

    public getClientVersion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientVersion_args(getClientVersion_args other) {
    }

    @Override
    public getClientVersion_args deepCopy() {
      return new getClientVersion_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getClientVersion_args)
        return this.equals((getClientVersion_args)that);
      return false;
    }

    public boolean equals(getClientVersion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getClientVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getClientVersion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientVersion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getClientVersion_argsStandardScheme getScheme() {
        return new getClientVersion_argsStandardScheme();
      }
    }

    private static class getClientVersion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getClientVersion_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientVersion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getClientVersion_argsTupleScheme getScheme() {
        return new getClientVersion_argsTupleScheme();
      }
    }

    private static class getClientVersion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getClientVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getClientVersion_result implements org.apache.thrift.TBase<getClientVersion_result, getClientVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClientVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getClientVersion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getClientVersion_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable JMXError err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientVersion_result.class, metaDataMap);
    }

    public getClientVersion_result() {
    }

    public getClientVersion_result(
      java.lang.String success,
      JMXError err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientVersion_result(getClientVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new JMXError(other.err);
      }
    }

    @Override
    public getClientVersion_result deepCopy() {
      return new getClientVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public getClientVersion_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getErr() {
      return this.err;
    }

    public getClientVersion_result setErr(@org.apache.thrift.annotation.Nullable JMXError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getClientVersion_result)
        return this.equals((getClientVersion_result)that);
      return false;
    }

    public boolean equals(getClientVersion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getClientVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErr(), other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getClientVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientVersion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getClientVersion_resultStandardScheme getScheme() {
        return new getClientVersion_resultStandardScheme();
      }
    }

    private static class getClientVersion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getClientVersion_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new JMXError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientVersion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getClientVersion_resultTupleScheme getScheme() {
        return new getClientVersion_resultTupleScheme();
      }
    }

    private static class getClientVersion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getClientVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new JMXError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class queryMBeanNames_args implements org.apache.thrift.TBase<queryMBeanNames_args, queryMBeanNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMBeanNames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMBeanNames_args");

    private static final org.apache.thrift.protocol.TField M_BEAN_NAME_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("mBeanNamePattern", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryMBeanNames_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryMBeanNames_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mBeanNamePattern; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M_BEAN_NAME_PATTERN((short)1, "mBeanNamePattern");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M_BEAN_NAME_PATTERN
            return M_BEAN_NAME_PATTERN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M_BEAN_NAME_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("mBeanNamePattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMBeanNames_args.class, metaDataMap);
    }

    public queryMBeanNames_args() {
    }

    public queryMBeanNames_args(
      java.lang.String mBeanNamePattern)
    {
      this();
      this.mBeanNamePattern = mBeanNamePattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMBeanNames_args(queryMBeanNames_args other) {
      if (other.isSetMBeanNamePattern()) {
        this.mBeanNamePattern = other.mBeanNamePattern;
      }
    }

    @Override
    public queryMBeanNames_args deepCopy() {
      return new queryMBeanNames_args(this);
    }

    @Override
    public void clear() {
      this.mBeanNamePattern = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMBeanNamePattern() {
      return this.mBeanNamePattern;
    }

    public queryMBeanNames_args setMBeanNamePattern(@org.apache.thrift.annotation.Nullable java.lang.String mBeanNamePattern) {
      this.mBeanNamePattern = mBeanNamePattern;
      return this;
    }

    public void unsetMBeanNamePattern() {
      this.mBeanNamePattern = null;
    }

    /** Returns true if field mBeanNamePattern is set (has been assigned a value) and false otherwise */
    public boolean isSetMBeanNamePattern() {
      return this.mBeanNamePattern != null;
    }

    public void setMBeanNamePatternIsSet(boolean value) {
      if (!value) {
        this.mBeanNamePattern = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case M_BEAN_NAME_PATTERN:
        if (value == null) {
          unsetMBeanNamePattern();
        } else {
          setMBeanNamePattern((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case M_BEAN_NAME_PATTERN:
        return getMBeanNamePattern();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case M_BEAN_NAME_PATTERN:
        return isSetMBeanNamePattern();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof queryMBeanNames_args)
        return this.equals((queryMBeanNames_args)that);
      return false;
    }

    public boolean equals(queryMBeanNames_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mBeanNamePattern = true && this.isSetMBeanNamePattern();
      boolean that_present_mBeanNamePattern = true && that.isSetMBeanNamePattern();
      if (this_present_mBeanNamePattern || that_present_mBeanNamePattern) {
        if (!(this_present_mBeanNamePattern && that_present_mBeanNamePattern))
          return false;
        if (!this.mBeanNamePattern.equals(that.mBeanNamePattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMBeanNamePattern()) ? 131071 : 524287);
      if (isSetMBeanNamePattern())
        hashCode = hashCode * 8191 + mBeanNamePattern.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryMBeanNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMBeanNamePattern(), other.isSetMBeanNamePattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMBeanNamePattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mBeanNamePattern, other.mBeanNamePattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryMBeanNames_args(");
      boolean first = true;

      sb.append("mBeanNamePattern:");
      if (this.mBeanNamePattern == null) {
        sb.append("null");
      } else {
        sb.append(this.mBeanNamePattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMBeanNames_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryMBeanNames_argsStandardScheme getScheme() {
        return new queryMBeanNames_argsStandardScheme();
      }
    }

    private static class queryMBeanNames_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryMBeanNames_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMBeanNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M_BEAN_NAME_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mBeanNamePattern = iprot.readString();
                struct.setMBeanNamePatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMBeanNames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mBeanNamePattern != null) {
          oprot.writeFieldBegin(M_BEAN_NAME_PATTERN_FIELD_DESC);
          oprot.writeString(struct.mBeanNamePattern);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMBeanNames_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryMBeanNames_argsTupleScheme getScheme() {
        return new queryMBeanNames_argsTupleScheme();
      }
    }

    private static class queryMBeanNames_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryMBeanNames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMBeanNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMBeanNamePattern()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMBeanNamePattern()) {
          oprot.writeString(struct.mBeanNamePattern);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMBeanNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mBeanNamePattern = iprot.readString();
          struct.setMBeanNamePatternIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class queryMBeanNames_result implements org.apache.thrift.TBase<queryMBeanNames_result, queryMBeanNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMBeanNames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMBeanNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONN_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("connErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField JMX_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("jmxErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryMBeanNames_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryMBeanNames_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success; // required
    public @org.apache.thrift.annotation.Nullable JMXConnectionError connErr; // required
    public @org.apache.thrift.annotation.Nullable JMXError jmxErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONN_ERR((short)1, "connErr"),
      JMX_ERR((short)2, "jmxErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONN_ERR
            return CONN_ERR;
          case 2: // JMX_ERR
            return JMX_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CONN_ERR, new org.apache.thrift.meta_data.FieldMetaData("connErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConnectionError.class)));
      tmpMap.put(_Fields.JMX_ERR, new org.apache.thrift.meta_data.FieldMetaData("jmxErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMBeanNames_result.class, metaDataMap);
    }

    public queryMBeanNames_result() {
    }

    public queryMBeanNames_result(
      java.util.List<java.lang.String> success,
      JMXConnectionError connErr,
      JMXError jmxErr)
    {
      this();
      this.success = success;
      this.connErr = connErr;
      this.jmxErr = jmxErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMBeanNames_result(queryMBeanNames_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetConnErr()) {
        this.connErr = new JMXConnectionError(other.connErr);
      }
      if (other.isSetJmxErr()) {
        this.jmxErr = new JMXError(other.jmxErr);
      }
    }

    @Override
    public queryMBeanNames_result deepCopy() {
      return new queryMBeanNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.connErr = null;
      this.jmxErr = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public queryMBeanNames_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConnectionError getConnErr() {
      return this.connErr;
    }

    public queryMBeanNames_result setConnErr(@org.apache.thrift.annotation.Nullable JMXConnectionError connErr) {
      this.connErr = connErr;
      return this;
    }

    public void unsetConnErr() {
      this.connErr = null;
    }

    /** Returns true if field connErr is set (has been assigned a value) and false otherwise */
    public boolean isSetConnErr() {
      return this.connErr != null;
    }

    public void setConnErrIsSet(boolean value) {
      if (!value) {
        this.connErr = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getJmxErr() {
      return this.jmxErr;
    }

    public queryMBeanNames_result setJmxErr(@org.apache.thrift.annotation.Nullable JMXError jmxErr) {
      this.jmxErr = jmxErr;
      return this;
    }

    public void unsetJmxErr() {
      this.jmxErr = null;
    }

    /** Returns true if field jmxErr is set (has been assigned a value) and false otherwise */
    public boolean isSetJmxErr() {
      return this.jmxErr != null;
    }

    public void setJmxErrIsSet(boolean value) {
      if (!value) {
        this.jmxErr = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case CONN_ERR:
        if (value == null) {
          unsetConnErr();
        } else {
          setConnErr((JMXConnectionError)value);
        }
        break;

      case JMX_ERR:
        if (value == null) {
          unsetJmxErr();
        } else {
          setJmxErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONN_ERR:
        return getConnErr();

      case JMX_ERR:
        return getJmxErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONN_ERR:
        return isSetConnErr();
      case JMX_ERR:
        return isSetJmxErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof queryMBeanNames_result)
        return this.equals((queryMBeanNames_result)that);
      return false;
    }

    public boolean equals(queryMBeanNames_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_connErr = true && this.isSetConnErr();
      boolean that_present_connErr = true && that.isSetConnErr();
      if (this_present_connErr || that_present_connErr) {
        if (!(this_present_connErr && that_present_connErr))
          return false;
        if (!this.connErr.equals(that.connErr))
          return false;
      }

      boolean this_present_jmxErr = true && this.isSetJmxErr();
      boolean that_present_jmxErr = true && that.isSetJmxErr();
      if (this_present_jmxErr || that_present_jmxErr) {
        if (!(this_present_jmxErr && that_present_jmxErr))
          return false;
        if (!this.jmxErr.equals(that.jmxErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetConnErr()) ? 131071 : 524287);
      if (isSetConnErr())
        hashCode = hashCode * 8191 + connErr.hashCode();

      hashCode = hashCode * 8191 + ((isSetJmxErr()) ? 131071 : 524287);
      if (isSetJmxErr())
        hashCode = hashCode * 8191 + jmxErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryMBeanNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetConnErr(), other.isSetConnErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connErr, other.connErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetJmxErr(), other.isSetJmxErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJmxErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jmxErr, other.jmxErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryMBeanNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("connErr:");
      if (this.connErr == null) {
        sb.append("null");
      } else {
        sb.append(this.connErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jmxErr:");
      if (this.jmxErr == null) {
        sb.append("null");
      } else {
        sb.append(this.jmxErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMBeanNames_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryMBeanNames_resultStandardScheme getScheme() {
        return new queryMBeanNames_resultStandardScheme();
      }
    }

    private static class queryMBeanNames_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryMBeanNames_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMBeanNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list8.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONN_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connErr = new JMXConnectionError();
                struct.connErr.read(iprot);
                struct.setConnErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JMX_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jmxErr = new JMXError();
                struct.jmxErr.read(iprot);
                struct.setJmxErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMBeanNames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.connErr != null) {
          oprot.writeFieldBegin(CONN_ERR_FIELD_DESC);
          struct.connErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.jmxErr != null) {
          oprot.writeFieldBegin(JMX_ERR_FIELD_DESC);
          struct.jmxErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMBeanNames_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryMBeanNames_resultTupleScheme getScheme() {
        return new queryMBeanNames_resultTupleScheme();
      }
    }

    private static class queryMBeanNames_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryMBeanNames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMBeanNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetConnErr()) {
          optionals.set(1);
        }
        if (struct.isSetJmxErr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetConnErr()) {
          struct.connErr.write(oprot);
        }
        if (struct.isSetJmxErr()) {
          struct.jmxErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMBeanNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.success = new java.util.ArrayList<java.lang.String>(_list13.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.connErr = new JMXConnectionError();
          struct.connErr.read(iprot);
          struct.setConnErrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jmxErr = new JMXError();
          struct.jmxErr.read(iprot);
          struct.setJmxErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMBeanAttributeNames_args implements org.apache.thrift.TBase<getMBeanAttributeNames_args, getMBeanAttributeNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMBeanAttributeNames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMBeanAttributeNames_args");

    private static final org.apache.thrift.protocol.TField M_BEAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mBeanName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMBeanAttributeNames_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMBeanAttributeNames_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mBeanName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M_BEAN_NAME((short)1, "mBeanName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M_BEAN_NAME
            return M_BEAN_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M_BEAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("mBeanName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMBeanAttributeNames_args.class, metaDataMap);
    }

    public getMBeanAttributeNames_args() {
    }

    public getMBeanAttributeNames_args(
      java.lang.String mBeanName)
    {
      this();
      this.mBeanName = mBeanName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMBeanAttributeNames_args(getMBeanAttributeNames_args other) {
      if (other.isSetMBeanName()) {
        this.mBeanName = other.mBeanName;
      }
    }

    @Override
    public getMBeanAttributeNames_args deepCopy() {
      return new getMBeanAttributeNames_args(this);
    }

    @Override
    public void clear() {
      this.mBeanName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMBeanName() {
      return this.mBeanName;
    }

    public getMBeanAttributeNames_args setMBeanName(@org.apache.thrift.annotation.Nullable java.lang.String mBeanName) {
      this.mBeanName = mBeanName;
      return this;
    }

    public void unsetMBeanName() {
      this.mBeanName = null;
    }

    /** Returns true if field mBeanName is set (has been assigned a value) and false otherwise */
    public boolean isSetMBeanName() {
      return this.mBeanName != null;
    }

    public void setMBeanNameIsSet(boolean value) {
      if (!value) {
        this.mBeanName = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case M_BEAN_NAME:
        if (value == null) {
          unsetMBeanName();
        } else {
          setMBeanName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case M_BEAN_NAME:
        return getMBeanName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case M_BEAN_NAME:
        return isSetMBeanName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getMBeanAttributeNames_args)
        return this.equals((getMBeanAttributeNames_args)that);
      return false;
    }

    public boolean equals(getMBeanAttributeNames_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mBeanName = true && this.isSetMBeanName();
      boolean that_present_mBeanName = true && that.isSetMBeanName();
      if (this_present_mBeanName || that_present_mBeanName) {
        if (!(this_present_mBeanName && that_present_mBeanName))
          return false;
        if (!this.mBeanName.equals(that.mBeanName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMBeanName()) ? 131071 : 524287);
      if (isSetMBeanName())
        hashCode = hashCode * 8191 + mBeanName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMBeanAttributeNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMBeanName(), other.isSetMBeanName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMBeanName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mBeanName, other.mBeanName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMBeanAttributeNames_args(");
      boolean first = true;

      sb.append("mBeanName:");
      if (this.mBeanName == null) {
        sb.append("null");
      } else {
        sb.append(this.mBeanName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMBeanAttributeNames_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMBeanAttributeNames_argsStandardScheme getScheme() {
        return new getMBeanAttributeNames_argsStandardScheme();
      }
    }

    private static class getMBeanAttributeNames_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMBeanAttributeNames_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMBeanAttributeNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M_BEAN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mBeanName = iprot.readString();
                struct.setMBeanNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMBeanAttributeNames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mBeanName != null) {
          oprot.writeFieldBegin(M_BEAN_NAME_FIELD_DESC);
          oprot.writeString(struct.mBeanName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMBeanAttributeNames_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMBeanAttributeNames_argsTupleScheme getScheme() {
        return new getMBeanAttributeNames_argsTupleScheme();
      }
    }

    private static class getMBeanAttributeNames_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMBeanAttributeNames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMBeanAttributeNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMBeanName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMBeanName()) {
          oprot.writeString(struct.mBeanName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMBeanAttributeNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mBeanName = iprot.readString();
          struct.setMBeanNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMBeanAttributeNames_result implements org.apache.thrift.TBase<getMBeanAttributeNames_result, getMBeanAttributeNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMBeanAttributeNames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMBeanAttributeNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONN_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("connErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField JMX_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("jmxErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMBeanAttributeNames_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMBeanAttributeNames_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success; // required
    public @org.apache.thrift.annotation.Nullable JMXConnectionError connErr; // required
    public @org.apache.thrift.annotation.Nullable JMXError jmxErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONN_ERR((short)1, "connErr"),
      JMX_ERR((short)2, "jmxErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONN_ERR
            return CONN_ERR;
          case 2: // JMX_ERR
            return JMX_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CONN_ERR, new org.apache.thrift.meta_data.FieldMetaData("connErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConnectionError.class)));
      tmpMap.put(_Fields.JMX_ERR, new org.apache.thrift.meta_data.FieldMetaData("jmxErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMBeanAttributeNames_result.class, metaDataMap);
    }

    public getMBeanAttributeNames_result() {
    }

    public getMBeanAttributeNames_result(
      java.util.List<java.lang.String> success,
      JMXConnectionError connErr,
      JMXError jmxErr)
    {
      this();
      this.success = success;
      this.connErr = connErr;
      this.jmxErr = jmxErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMBeanAttributeNames_result(getMBeanAttributeNames_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetConnErr()) {
        this.connErr = new JMXConnectionError(other.connErr);
      }
      if (other.isSetJmxErr()) {
        this.jmxErr = new JMXError(other.jmxErr);
      }
    }

    @Override
    public getMBeanAttributeNames_result deepCopy() {
      return new getMBeanAttributeNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.connErr = null;
      this.jmxErr = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public getMBeanAttributeNames_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConnectionError getConnErr() {
      return this.connErr;
    }

    public getMBeanAttributeNames_result setConnErr(@org.apache.thrift.annotation.Nullable JMXConnectionError connErr) {
      this.connErr = connErr;
      return this;
    }

    public void unsetConnErr() {
      this.connErr = null;
    }

    /** Returns true if field connErr is set (has been assigned a value) and false otherwise */
    public boolean isSetConnErr() {
      return this.connErr != null;
    }

    public void setConnErrIsSet(boolean value) {
      if (!value) {
        this.connErr = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getJmxErr() {
      return this.jmxErr;
    }

    public getMBeanAttributeNames_result setJmxErr(@org.apache.thrift.annotation.Nullable JMXError jmxErr) {
      this.jmxErr = jmxErr;
      return this;
    }

    public void unsetJmxErr() {
      this.jmxErr = null;
    }

    /** Returns true if field jmxErr is set (has been assigned a value) and false otherwise */
    public boolean isSetJmxErr() {
      return this.jmxErr != null;
    }

    public void setJmxErrIsSet(boolean value) {
      if (!value) {
        this.jmxErr = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case CONN_ERR:
        if (value == null) {
          unsetConnErr();
        } else {
          setConnErr((JMXConnectionError)value);
        }
        break;

      case JMX_ERR:
        if (value == null) {
          unsetJmxErr();
        } else {
          setJmxErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONN_ERR:
        return getConnErr();

      case JMX_ERR:
        return getJmxErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONN_ERR:
        return isSetConnErr();
      case JMX_ERR:
        return isSetJmxErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getMBeanAttributeNames_result)
        return this.equals((getMBeanAttributeNames_result)that);
      return false;
    }

    public boolean equals(getMBeanAttributeNames_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_connErr = true && this.isSetConnErr();
      boolean that_present_connErr = true && that.isSetConnErr();
      if (this_present_connErr || that_present_connErr) {
        if (!(this_present_connErr && that_present_connErr))
          return false;
        if (!this.connErr.equals(that.connErr))
          return false;
      }

      boolean this_present_jmxErr = true && this.isSetJmxErr();
      boolean that_present_jmxErr = true && that.isSetJmxErr();
      if (this_present_jmxErr || that_present_jmxErr) {
        if (!(this_present_jmxErr && that_present_jmxErr))
          return false;
        if (!this.jmxErr.equals(that.jmxErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetConnErr()) ? 131071 : 524287);
      if (isSetConnErr())
        hashCode = hashCode * 8191 + connErr.hashCode();

      hashCode = hashCode * 8191 + ((isSetJmxErr()) ? 131071 : 524287);
      if (isSetJmxErr())
        hashCode = hashCode * 8191 + jmxErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMBeanAttributeNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetConnErr(), other.isSetConnErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connErr, other.connErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetJmxErr(), other.isSetJmxErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJmxErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jmxErr, other.jmxErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMBeanAttributeNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("connErr:");
      if (this.connErr == null) {
        sb.append("null");
      } else {
        sb.append(this.connErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jmxErr:");
      if (this.jmxErr == null) {
        sb.append("null");
      } else {
        sb.append(this.jmxErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMBeanAttributeNames_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMBeanAttributeNames_resultStandardScheme getScheme() {
        return new getMBeanAttributeNames_resultStandardScheme();
      }
    }

    private static class getMBeanAttributeNames_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMBeanAttributeNames_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMBeanAttributeNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list16.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONN_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connErr = new JMXConnectionError();
                struct.connErr.read(iprot);
                struct.setConnErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JMX_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jmxErr = new JMXError();
                struct.jmxErr.read(iprot);
                struct.setJmxErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMBeanAttributeNames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.connErr != null) {
          oprot.writeFieldBegin(CONN_ERR_FIELD_DESC);
          struct.connErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.jmxErr != null) {
          oprot.writeFieldBegin(JMX_ERR_FIELD_DESC);
          struct.jmxErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMBeanAttributeNames_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMBeanAttributeNames_resultTupleScheme getScheme() {
        return new getMBeanAttributeNames_resultTupleScheme();
      }
    }

    private static class getMBeanAttributeNames_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMBeanAttributeNames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMBeanAttributeNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetConnErr()) {
          optionals.set(1);
        }
        if (struct.isSetJmxErr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetConnErr()) {
          struct.connErr.write(oprot);
        }
        if (struct.isSetJmxErr()) {
          struct.jmxErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMBeanAttributeNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.success = new java.util.ArrayList<java.lang.String>(_list21.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.connErr = new JMXConnectionError();
          struct.connErr.read(iprot);
          struct.setConnErrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jmxErr = new JMXError();
          struct.jmxErr.read(iprot);
          struct.setJmxErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMBeanAttributes_args implements org.apache.thrift.TBase<getMBeanAttributes_args, getMBeanAttributes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMBeanAttributes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMBeanAttributes_args");

    private static final org.apache.thrift.protocol.TField M_BEAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mBeanName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMBeanAttributes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMBeanAttributes_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mBeanName; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> attributes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M_BEAN_NAME((short)1, "mBeanName"),
      ATTRIBUTES((short)2, "attributes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M_BEAN_NAME
            return M_BEAN_NAME;
          case 2: // ATTRIBUTES
            return ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M_BEAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("mBeanName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMBeanAttributes_args.class, metaDataMap);
    }

    public getMBeanAttributes_args() {
    }

    public getMBeanAttributes_args(
      java.lang.String mBeanName,
      java.util.List<java.lang.String> attributes)
    {
      this();
      this.mBeanName = mBeanName;
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMBeanAttributes_args(getMBeanAttributes_args other) {
      if (other.isSetMBeanName()) {
        this.mBeanName = other.mBeanName;
      }
      if (other.isSetAttributes()) {
        java.util.List<java.lang.String> __this__attributes = new java.util.ArrayList<java.lang.String>(other.attributes);
        this.attributes = __this__attributes;
      }
    }

    @Override
    public getMBeanAttributes_args deepCopy() {
      return new getMBeanAttributes_args(this);
    }

    @Override
    public void clear() {
      this.mBeanName = null;
      this.attributes = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMBeanName() {
      return this.mBeanName;
    }

    public getMBeanAttributes_args setMBeanName(@org.apache.thrift.annotation.Nullable java.lang.String mBeanName) {
      this.mBeanName = mBeanName;
      return this;
    }

    public void unsetMBeanName() {
      this.mBeanName = null;
    }

    /** Returns true if field mBeanName is set (has been assigned a value) and false otherwise */
    public boolean isSetMBeanName() {
      return this.mBeanName != null;
    }

    public void setMBeanNameIsSet(boolean value) {
      if (!value) {
        this.mBeanName = null;
      }
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getAttributesIterator() {
      return (this.attributes == null) ? null : this.attributes.iterator();
    }

    public void addToAttributes(java.lang.String elem) {
      if (this.attributes == null) {
        this.attributes = new java.util.ArrayList<java.lang.String>();
      }
      this.attributes.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getAttributes() {
      return this.attributes;
    }

    public getMBeanAttributes_args setAttributes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> attributes) {
      this.attributes = attributes;
      return this;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case M_BEAN_NAME:
        if (value == null) {
          unsetMBeanName();
        } else {
          setMBeanName((java.lang.String)value);
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          setAttributes((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case M_BEAN_NAME:
        return getMBeanName();

      case ATTRIBUTES:
        return getAttributes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case M_BEAN_NAME:
        return isSetMBeanName();
      case ATTRIBUTES:
        return isSetAttributes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getMBeanAttributes_args)
        return this.equals((getMBeanAttributes_args)that);
      return false;
    }

    public boolean equals(getMBeanAttributes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mBeanName = true && this.isSetMBeanName();
      boolean that_present_mBeanName = true && that.isSetMBeanName();
      if (this_present_mBeanName || that_present_mBeanName) {
        if (!(this_present_mBeanName && that_present_mBeanName))
          return false;
        if (!this.mBeanName.equals(that.mBeanName))
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMBeanName()) ? 131071 : 524287);
      if (isSetMBeanName())
        hashCode = hashCode * 8191 + mBeanName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAttributes()) ? 131071 : 524287);
      if (isSetAttributes())
        hashCode = hashCode * 8191 + attributes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMBeanAttributes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMBeanName(), other.isSetMBeanName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMBeanName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mBeanName, other.mBeanName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetAttributes(), other.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMBeanAttributes_args(");
      boolean first = true;

      sb.append("mBeanName:");
      if (this.mBeanName == null) {
        sb.append("null");
      } else {
        sb.append(this.mBeanName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMBeanAttributes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMBeanAttributes_argsStandardScheme getScheme() {
        return new getMBeanAttributes_argsStandardScheme();
      }
    }

    private static class getMBeanAttributes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMBeanAttributes_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMBeanAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M_BEAN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mBeanName = iprot.readString();
                struct.setMBeanNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTRIBUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.attributes = new java.util.ArrayList<java.lang.String>(_list24.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.attributes.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setAttributesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMBeanAttributes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mBeanName != null) {
          oprot.writeFieldBegin(M_BEAN_NAME_FIELD_DESC);
          oprot.writeString(struct.mBeanName);
          oprot.writeFieldEnd();
        }
        if (struct.attributes != null) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.attributes.size()));
            for (java.lang.String _iter27 : struct.attributes)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMBeanAttributes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMBeanAttributes_argsTupleScheme getScheme() {
        return new getMBeanAttributes_argsTupleScheme();
      }
    }

    private static class getMBeanAttributes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMBeanAttributes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMBeanAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMBeanName()) {
          optionals.set(0);
        }
        if (struct.isSetAttributes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMBeanName()) {
          oprot.writeString(struct.mBeanName);
        }
        if (struct.isSetAttributes()) {
          {
            oprot.writeI32(struct.attributes.size());
            for (java.lang.String _iter28 : struct.attributes)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMBeanAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mBeanName = iprot.readString();
          struct.setMBeanNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.attributes = new java.util.ArrayList<java.lang.String>(_list29.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.attributes.add(_elem30);
            }
          }
          struct.setAttributesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMBeanAttributes_result implements org.apache.thrift.TBase<getMBeanAttributes_result, getMBeanAttributes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMBeanAttributes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMBeanAttributes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONN_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("connErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField JMX_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("jmxErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMBeanAttributes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMBeanAttributes_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<AttributeResponse> success; // required
    public @org.apache.thrift.annotation.Nullable JMXConnectionError connErr; // required
    public @org.apache.thrift.annotation.Nullable JMXError jmxErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONN_ERR((short)1, "connErr"),
      JMX_ERR((short)2, "jmxErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONN_ERR
            return CONN_ERR;
          case 2: // JMX_ERR
            return JMX_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttributeResponse.class))));
      tmpMap.put(_Fields.CONN_ERR, new org.apache.thrift.meta_data.FieldMetaData("connErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConnectionError.class)));
      tmpMap.put(_Fields.JMX_ERR, new org.apache.thrift.meta_data.FieldMetaData("jmxErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMBeanAttributes_result.class, metaDataMap);
    }

    public getMBeanAttributes_result() {
    }

    public getMBeanAttributes_result(
      java.util.List<AttributeResponse> success,
      JMXConnectionError connErr,
      JMXError jmxErr)
    {
      this();
      this.success = success;
      this.connErr = connErr;
      this.jmxErr = jmxErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMBeanAttributes_result(getMBeanAttributes_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AttributeResponse> __this__success = new java.util.ArrayList<AttributeResponse>(other.success.size());
        for (AttributeResponse other_element : other.success) {
          __this__success.add(new AttributeResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetConnErr()) {
        this.connErr = new JMXConnectionError(other.connErr);
      }
      if (other.isSetJmxErr()) {
        this.jmxErr = new JMXError(other.jmxErr);
      }
    }

    @Override
    public getMBeanAttributes_result deepCopy() {
      return new getMBeanAttributes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.connErr = null;
      this.jmxErr = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<AttributeResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AttributeResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AttributeResponse>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<AttributeResponse> getSuccess() {
      return this.success;
    }

    public getMBeanAttributes_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<AttributeResponse> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConnectionError getConnErr() {
      return this.connErr;
    }

    public getMBeanAttributes_result setConnErr(@org.apache.thrift.annotation.Nullable JMXConnectionError connErr) {
      this.connErr = connErr;
      return this;
    }

    public void unsetConnErr() {
      this.connErr = null;
    }

    /** Returns true if field connErr is set (has been assigned a value) and false otherwise */
    public boolean isSetConnErr() {
      return this.connErr != null;
    }

    public void setConnErrIsSet(boolean value) {
      if (!value) {
        this.connErr = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getJmxErr() {
      return this.jmxErr;
    }

    public getMBeanAttributes_result setJmxErr(@org.apache.thrift.annotation.Nullable JMXError jmxErr) {
      this.jmxErr = jmxErr;
      return this;
    }

    public void unsetJmxErr() {
      this.jmxErr = null;
    }

    /** Returns true if field jmxErr is set (has been assigned a value) and false otherwise */
    public boolean isSetJmxErr() {
      return this.jmxErr != null;
    }

    public void setJmxErrIsSet(boolean value) {
      if (!value) {
        this.jmxErr = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AttributeResponse>)value);
        }
        break;

      case CONN_ERR:
        if (value == null) {
          unsetConnErr();
        } else {
          setConnErr((JMXConnectionError)value);
        }
        break;

      case JMX_ERR:
        if (value == null) {
          unsetJmxErr();
        } else {
          setJmxErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONN_ERR:
        return getConnErr();

      case JMX_ERR:
        return getJmxErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONN_ERR:
        return isSetConnErr();
      case JMX_ERR:
        return isSetJmxErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getMBeanAttributes_result)
        return this.equals((getMBeanAttributes_result)that);
      return false;
    }

    public boolean equals(getMBeanAttributes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_connErr = true && this.isSetConnErr();
      boolean that_present_connErr = true && that.isSetConnErr();
      if (this_present_connErr || that_present_connErr) {
        if (!(this_present_connErr && that_present_connErr))
          return false;
        if (!this.connErr.equals(that.connErr))
          return false;
      }

      boolean this_present_jmxErr = true && this.isSetJmxErr();
      boolean that_present_jmxErr = true && that.isSetJmxErr();
      if (this_present_jmxErr || that_present_jmxErr) {
        if (!(this_present_jmxErr && that_present_jmxErr))
          return false;
        if (!this.jmxErr.equals(that.jmxErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetConnErr()) ? 131071 : 524287);
      if (isSetConnErr())
        hashCode = hashCode * 8191 + connErr.hashCode();

      hashCode = hashCode * 8191 + ((isSetJmxErr()) ? 131071 : 524287);
      if (isSetJmxErr())
        hashCode = hashCode * 8191 + jmxErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMBeanAttributes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetConnErr(), other.isSetConnErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connErr, other.connErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetJmxErr(), other.isSetJmxErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJmxErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jmxErr, other.jmxErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMBeanAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("connErr:");
      if (this.connErr == null) {
        sb.append("null");
      } else {
        sb.append(this.connErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jmxErr:");
      if (this.jmxErr == null) {
        sb.append("null");
      } else {
        sb.append(this.jmxErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMBeanAttributes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMBeanAttributes_resultStandardScheme getScheme() {
        return new getMBeanAttributes_resultStandardScheme();
      }
    }

    private static class getMBeanAttributes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMBeanAttributes_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMBeanAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AttributeResponse>(_list32.size);
                  @org.apache.thrift.annotation.Nullable AttributeResponse _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new AttributeResponse();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONN_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connErr = new JMXConnectionError();
                struct.connErr.read(iprot);
                struct.setConnErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JMX_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jmxErr = new JMXError();
                struct.jmxErr.read(iprot);
                struct.setJmxErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMBeanAttributes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AttributeResponse _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.connErr != null) {
          oprot.writeFieldBegin(CONN_ERR_FIELD_DESC);
          struct.connErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.jmxErr != null) {
          oprot.writeFieldBegin(JMX_ERR_FIELD_DESC);
          struct.jmxErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMBeanAttributes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMBeanAttributes_resultTupleScheme getScheme() {
        return new getMBeanAttributes_resultTupleScheme();
      }
    }

    private static class getMBeanAttributes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMBeanAttributes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMBeanAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetConnErr()) {
          optionals.set(1);
        }
        if (struct.isSetJmxErr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AttributeResponse _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetConnErr()) {
          struct.connErr.write(oprot);
        }
        if (struct.isSetJmxErr()) {
          struct.jmxErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMBeanAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<AttributeResponse>(_list37.size);
            @org.apache.thrift.annotation.Nullable AttributeResponse _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new AttributeResponse();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.connErr = new JMXConnectionError();
          struct.connErr.read(iprot);
          struct.setConnErrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jmxErr = new JMXError();
          struct.jmxErr.read(iprot);
          struct.setJmxErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class queryMBeanAttributes_args implements org.apache.thrift.TBase<queryMBeanAttributes_args, queryMBeanAttributes_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMBeanAttributes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMBeanAttributes_args");

    private static final org.apache.thrift.protocol.TField M_BEAN_NAME_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("mBeanNamePattern", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryMBeanAttributes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryMBeanAttributes_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String mBeanNamePattern; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> attributes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M_BEAN_NAME_PATTERN((short)1, "mBeanNamePattern"),
      ATTRIBUTES((short)2, "attributes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M_BEAN_NAME_PATTERN
            return M_BEAN_NAME_PATTERN;
          case 2: // ATTRIBUTES
            return ATTRIBUTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M_BEAN_NAME_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("mBeanNamePattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMBeanAttributes_args.class, metaDataMap);
    }

    public queryMBeanAttributes_args() {
    }

    public queryMBeanAttributes_args(
      java.lang.String mBeanNamePattern,
      java.util.List<java.lang.String> attributes)
    {
      this();
      this.mBeanNamePattern = mBeanNamePattern;
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMBeanAttributes_args(queryMBeanAttributes_args other) {
      if (other.isSetMBeanNamePattern()) {
        this.mBeanNamePattern = other.mBeanNamePattern;
      }
      if (other.isSetAttributes()) {
        java.util.List<java.lang.String> __this__attributes = new java.util.ArrayList<java.lang.String>(other.attributes);
        this.attributes = __this__attributes;
      }
    }

    @Override
    public queryMBeanAttributes_args deepCopy() {
      return new queryMBeanAttributes_args(this);
    }

    @Override
    public void clear() {
      this.mBeanNamePattern = null;
      this.attributes = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMBeanNamePattern() {
      return this.mBeanNamePattern;
    }

    public queryMBeanAttributes_args setMBeanNamePattern(@org.apache.thrift.annotation.Nullable java.lang.String mBeanNamePattern) {
      this.mBeanNamePattern = mBeanNamePattern;
      return this;
    }

    public void unsetMBeanNamePattern() {
      this.mBeanNamePattern = null;
    }

    /** Returns true if field mBeanNamePattern is set (has been assigned a value) and false otherwise */
    public boolean isSetMBeanNamePattern() {
      return this.mBeanNamePattern != null;
    }

    public void setMBeanNamePatternIsSet(boolean value) {
      if (!value) {
        this.mBeanNamePattern = null;
      }
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getAttributesIterator() {
      return (this.attributes == null) ? null : this.attributes.iterator();
    }

    public void addToAttributes(java.lang.String elem) {
      if (this.attributes == null) {
        this.attributes = new java.util.ArrayList<java.lang.String>();
      }
      this.attributes.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getAttributes() {
      return this.attributes;
    }

    public queryMBeanAttributes_args setAttributes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> attributes) {
      this.attributes = attributes;
      return this;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case M_BEAN_NAME_PATTERN:
        if (value == null) {
          unsetMBeanNamePattern();
        } else {
          setMBeanNamePattern((java.lang.String)value);
        }
        break;

      case ATTRIBUTES:
        if (value == null) {
          unsetAttributes();
        } else {
          setAttributes((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case M_BEAN_NAME_PATTERN:
        return getMBeanNamePattern();

      case ATTRIBUTES:
        return getAttributes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case M_BEAN_NAME_PATTERN:
        return isSetMBeanNamePattern();
      case ATTRIBUTES:
        return isSetAttributes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof queryMBeanAttributes_args)
        return this.equals((queryMBeanAttributes_args)that);
      return false;
    }

    public boolean equals(queryMBeanAttributes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mBeanNamePattern = true && this.isSetMBeanNamePattern();
      boolean that_present_mBeanNamePattern = true && that.isSetMBeanNamePattern();
      if (this_present_mBeanNamePattern || that_present_mBeanNamePattern) {
        if (!(this_present_mBeanNamePattern && that_present_mBeanNamePattern))
          return false;
        if (!this.mBeanNamePattern.equals(that.mBeanNamePattern))
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMBeanNamePattern()) ? 131071 : 524287);
      if (isSetMBeanNamePattern())
        hashCode = hashCode * 8191 + mBeanNamePattern.hashCode();

      hashCode = hashCode * 8191 + ((isSetAttributes()) ? 131071 : 524287);
      if (isSetAttributes())
        hashCode = hashCode * 8191 + attributes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryMBeanAttributes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMBeanNamePattern(), other.isSetMBeanNamePattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMBeanNamePattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mBeanNamePattern, other.mBeanNamePattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetAttributes(), other.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryMBeanAttributes_args(");
      boolean first = true;

      sb.append("mBeanNamePattern:");
      if (this.mBeanNamePattern == null) {
        sb.append("null");
      } else {
        sb.append(this.mBeanNamePattern);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMBeanAttributes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryMBeanAttributes_argsStandardScheme getScheme() {
        return new queryMBeanAttributes_argsStandardScheme();
      }
    }

    private static class queryMBeanAttributes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryMBeanAttributes_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMBeanAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M_BEAN_NAME_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mBeanNamePattern = iprot.readString();
                struct.setMBeanNamePatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTRIBUTES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.attributes = new java.util.ArrayList<java.lang.String>(_list40.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readString();
                    struct.attributes.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setAttributesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMBeanAttributes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mBeanNamePattern != null) {
          oprot.writeFieldBegin(M_BEAN_NAME_PATTERN_FIELD_DESC);
          oprot.writeString(struct.mBeanNamePattern);
          oprot.writeFieldEnd();
        }
        if (struct.attributes != null) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.attributes.size()));
            for (java.lang.String _iter43 : struct.attributes)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMBeanAttributes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryMBeanAttributes_argsTupleScheme getScheme() {
        return new queryMBeanAttributes_argsTupleScheme();
      }
    }

    private static class queryMBeanAttributes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryMBeanAttributes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMBeanAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMBeanNamePattern()) {
          optionals.set(0);
        }
        if (struct.isSetAttributes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMBeanNamePattern()) {
          oprot.writeString(struct.mBeanNamePattern);
        }
        if (struct.isSetAttributes()) {
          {
            oprot.writeI32(struct.attributes.size());
            for (java.lang.String _iter44 : struct.attributes)
            {
              oprot.writeString(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMBeanAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mBeanNamePattern = iprot.readString();
          struct.setMBeanNamePatternIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list45 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.attributes = new java.util.ArrayList<java.lang.String>(_list45.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readString();
              struct.attributes.add(_elem46);
            }
          }
          struct.setAttributesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class queryMBeanAttributes_result implements org.apache.thrift.TBase<queryMBeanAttributes_result, queryMBeanAttributes_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMBeanAttributes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMBeanAttributes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CONN_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("connErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField JMX_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("jmxErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryMBeanAttributes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryMBeanAttributes_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<AttributeResponse> success; // required
    public @org.apache.thrift.annotation.Nullable JMXConnectionError connErr; // required
    public @org.apache.thrift.annotation.Nullable JMXError jmxErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CONN_ERR((short)1, "connErr"),
      JMX_ERR((short)2, "jmxErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CONN_ERR
            return CONN_ERR;
          case 2: // JMX_ERR
            return JMX_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttributeResponse.class))));
      tmpMap.put(_Fields.CONN_ERR, new org.apache.thrift.meta_data.FieldMetaData("connErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXConnectionError.class)));
      tmpMap.put(_Fields.JMX_ERR, new org.apache.thrift.meta_data.FieldMetaData("jmxErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMBeanAttributes_result.class, metaDataMap);
    }

    public queryMBeanAttributes_result() {
    }

    public queryMBeanAttributes_result(
      java.util.List<AttributeResponse> success,
      JMXConnectionError connErr,
      JMXError jmxErr)
    {
      this();
      this.success = success;
      this.connErr = connErr;
      this.jmxErr = jmxErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMBeanAttributes_result(queryMBeanAttributes_result other) {
      if (other.isSetSuccess()) {
        java.util.List<AttributeResponse> __this__success = new java.util.ArrayList<AttributeResponse>(other.success.size());
        for (AttributeResponse other_element : other.success) {
          __this__success.add(new AttributeResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetConnErr()) {
        this.connErr = new JMXConnectionError(other.connErr);
      }
      if (other.isSetJmxErr()) {
        this.jmxErr = new JMXError(other.jmxErr);
      }
    }

    @Override
    public queryMBeanAttributes_result deepCopy() {
      return new queryMBeanAttributes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.connErr = null;
      this.jmxErr = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<AttributeResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AttributeResponse elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<AttributeResponse>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<AttributeResponse> getSuccess() {
      return this.success;
    }

    public queryMBeanAttributes_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<AttributeResponse> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXConnectionError getConnErr() {
      return this.connErr;
    }

    public queryMBeanAttributes_result setConnErr(@org.apache.thrift.annotation.Nullable JMXConnectionError connErr) {
      this.connErr = connErr;
      return this;
    }

    public void unsetConnErr() {
      this.connErr = null;
    }

    /** Returns true if field connErr is set (has been assigned a value) and false otherwise */
    public boolean isSetConnErr() {
      return this.connErr != null;
    }

    public void setConnErrIsSet(boolean value) {
      if (!value) {
        this.connErr = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getJmxErr() {
      return this.jmxErr;
    }

    public queryMBeanAttributes_result setJmxErr(@org.apache.thrift.annotation.Nullable JMXError jmxErr) {
      this.jmxErr = jmxErr;
      return this;
    }

    public void unsetJmxErr() {
      this.jmxErr = null;
    }

    /** Returns true if field jmxErr is set (has been assigned a value) and false otherwise */
    public boolean isSetJmxErr() {
      return this.jmxErr != null;
    }

    public void setJmxErrIsSet(boolean value) {
      if (!value) {
        this.jmxErr = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<AttributeResponse>)value);
        }
        break;

      case CONN_ERR:
        if (value == null) {
          unsetConnErr();
        } else {
          setConnErr((JMXConnectionError)value);
        }
        break;

      case JMX_ERR:
        if (value == null) {
          unsetJmxErr();
        } else {
          setJmxErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CONN_ERR:
        return getConnErr();

      case JMX_ERR:
        return getJmxErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CONN_ERR:
        return isSetConnErr();
      case JMX_ERR:
        return isSetJmxErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof queryMBeanAttributes_result)
        return this.equals((queryMBeanAttributes_result)that);
      return false;
    }

    public boolean equals(queryMBeanAttributes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_connErr = true && this.isSetConnErr();
      boolean that_present_connErr = true && that.isSetConnErr();
      if (this_present_connErr || that_present_connErr) {
        if (!(this_present_connErr && that_present_connErr))
          return false;
        if (!this.connErr.equals(that.connErr))
          return false;
      }

      boolean this_present_jmxErr = true && this.isSetJmxErr();
      boolean that_present_jmxErr = true && that.isSetJmxErr();
      if (this_present_jmxErr || that_present_jmxErr) {
        if (!(this_present_jmxErr && that_present_jmxErr))
          return false;
        if (!this.jmxErr.equals(that.jmxErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetConnErr()) ? 131071 : 524287);
      if (isSetConnErr())
        hashCode = hashCode * 8191 + connErr.hashCode();

      hashCode = hashCode * 8191 + ((isSetJmxErr()) ? 131071 : 524287);
      if (isSetJmxErr())
        hashCode = hashCode * 8191 + jmxErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryMBeanAttributes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetConnErr(), other.isSetConnErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connErr, other.connErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetJmxErr(), other.isSetJmxErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJmxErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jmxErr, other.jmxErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryMBeanAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("connErr:");
      if (this.connErr == null) {
        sb.append("null");
      } else {
        sb.append(this.connErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jmxErr:");
      if (this.jmxErr == null) {
        sb.append("null");
      } else {
        sb.append(this.jmxErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMBeanAttributes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryMBeanAttributes_resultStandardScheme getScheme() {
        return new queryMBeanAttributes_resultStandardScheme();
      }
    }

    private static class queryMBeanAttributes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryMBeanAttributes_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMBeanAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<AttributeResponse>(_list48.size);
                  @org.apache.thrift.annotation.Nullable AttributeResponse _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new AttributeResponse();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CONN_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.connErr = new JMXConnectionError();
                struct.connErr.read(iprot);
                struct.setConnErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JMX_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jmxErr = new JMXError();
                struct.jmxErr.read(iprot);
                struct.setJmxErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMBeanAttributes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AttributeResponse _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.connErr != null) {
          oprot.writeFieldBegin(CONN_ERR_FIELD_DESC);
          struct.connErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.jmxErr != null) {
          oprot.writeFieldBegin(JMX_ERR_FIELD_DESC);
          struct.jmxErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMBeanAttributes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public queryMBeanAttributes_resultTupleScheme getScheme() {
        return new queryMBeanAttributes_resultTupleScheme();
      }
    }

    private static class queryMBeanAttributes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryMBeanAttributes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMBeanAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetConnErr()) {
          optionals.set(1);
        }
        if (struct.isSetJmxErr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AttributeResponse _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetConnErr()) {
          struct.connErr.write(oprot);
        }
        if (struct.isSetJmxErr()) {
          struct.jmxErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMBeanAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<AttributeResponse>(_list53.size);
            @org.apache.thrift.annotation.Nullable AttributeResponse _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new AttributeResponse();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.connErr = new JMXConnectionError();
          struct.connErr.read(iprot);
          struct.setConnErrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jmxErr = new JMXError();
          struct.jmxErr.read(iprot);
          struct.setJmxErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getInternalStats_args implements org.apache.thrift.TBase<getInternalStats_args, getInternalStats_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInternalStats_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInternalStats_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInternalStats_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInternalStats_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInternalStats_args.class, metaDataMap);
    }

    public getInternalStats_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInternalStats_args(getInternalStats_args other) {
    }

    @Override
    public getInternalStats_args deepCopy() {
      return new getInternalStats_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getInternalStats_args)
        return this.equals((getInternalStats_args)that);
      return false;
    }

    public boolean equals(getInternalStats_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getInternalStats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getInternalStats_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInternalStats_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getInternalStats_argsStandardScheme getScheme() {
        return new getInternalStats_argsStandardScheme();
      }
    }

    private static class getInternalStats_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInternalStats_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getInternalStats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getInternalStats_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInternalStats_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getInternalStats_argsTupleScheme getScheme() {
        return new getInternalStats_argsTupleScheme();
      }
    }

    private static class getInternalStats_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInternalStats_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInternalStats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInternalStats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getInternalStats_result implements org.apache.thrift.TBase<getInternalStats_result, getInternalStats_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInternalStats_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInternalStats_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField JMX_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("jmxErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInternalStats_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInternalStats_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<InternalStat> success; // required
    public @org.apache.thrift.annotation.Nullable JMXError jmxErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JMX_ERR((short)1, "jmxErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JMX_ERR
            return JMX_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalStat.class))));
      tmpMap.put(_Fields.JMX_ERR, new org.apache.thrift.meta_data.FieldMetaData("jmxErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JMXError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInternalStats_result.class, metaDataMap);
    }

    public getInternalStats_result() {
    }

    public getInternalStats_result(
      java.util.List<InternalStat> success,
      JMXError jmxErr)
    {
      this();
      this.success = success;
      this.jmxErr = jmxErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInternalStats_result(getInternalStats_result other) {
      if (other.isSetSuccess()) {
        java.util.List<InternalStat> __this__success = new java.util.ArrayList<InternalStat>(other.success.size());
        for (InternalStat other_element : other.success) {
          __this__success.add(new InternalStat(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetJmxErr()) {
        this.jmxErr = new JMXError(other.jmxErr);
      }
    }

    @Override
    public getInternalStats_result deepCopy() {
      return new getInternalStats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.jmxErr = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<InternalStat> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(InternalStat elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<InternalStat>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<InternalStat> getSuccess() {
      return this.success;
    }

    public getInternalStats_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<InternalStat> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public JMXError getJmxErr() {
      return this.jmxErr;
    }

    public getInternalStats_result setJmxErr(@org.apache.thrift.annotation.Nullable JMXError jmxErr) {
      this.jmxErr = jmxErr;
      return this;
    }

    public void unsetJmxErr() {
      this.jmxErr = null;
    }

    /** Returns true if field jmxErr is set (has been assigned a value) and false otherwise */
    public boolean isSetJmxErr() {
      return this.jmxErr != null;
    }

    public void setJmxErrIsSet(boolean value) {
      if (!value) {
        this.jmxErr = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<InternalStat>)value);
        }
        break;

      case JMX_ERR:
        if (value == null) {
          unsetJmxErr();
        } else {
          setJmxErr((JMXError)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JMX_ERR:
        return getJmxErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JMX_ERR:
        return isSetJmxErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getInternalStats_result)
        return this.equals((getInternalStats_result)that);
      return false;
    }

    public boolean equals(getInternalStats_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_jmxErr = true && this.isSetJmxErr();
      boolean that_present_jmxErr = true && that.isSetJmxErr();
      if (this_present_jmxErr || that_present_jmxErr) {
        if (!(this_present_jmxErr && that_present_jmxErr))
          return false;
        if (!this.jmxErr.equals(that.jmxErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetJmxErr()) ? 131071 : 524287);
      if (isSetJmxErr())
        hashCode = hashCode * 8191 + jmxErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getInternalStats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetJmxErr(), other.isSetJmxErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJmxErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jmxErr, other.jmxErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getInternalStats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jmxErr:");
      if (this.jmxErr == null) {
        sb.append("null");
      } else {
        sb.append(this.jmxErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInternalStats_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getInternalStats_resultStandardScheme getScheme() {
        return new getInternalStats_resultStandardScheme();
      }
    }

    private static class getInternalStats_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInternalStats_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getInternalStats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<InternalStat>(_list56.size);
                  @org.apache.thrift.annotation.Nullable InternalStat _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new InternalStat();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JMX_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jmxErr = new JMXError();
                struct.jmxErr.read(iprot);
                struct.setJmxErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getInternalStats_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (InternalStat _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.jmxErr != null) {
          oprot.writeFieldBegin(JMX_ERR_FIELD_DESC);
          struct.jmxErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInternalStats_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getInternalStats_resultTupleScheme getScheme() {
        return new getInternalStats_resultTupleScheme();
      }
    }

    private static class getInternalStats_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInternalStats_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInternalStats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJmxErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (InternalStat _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetJmxErr()) {
          struct.jmxErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInternalStats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<InternalStat>(_list61.size);
            @org.apache.thrift.annotation.Nullable InternalStat _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new InternalStat();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jmxErr = new JMXError();
          struct.jmxErr.read(iprot);
          struct.setJmxErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
