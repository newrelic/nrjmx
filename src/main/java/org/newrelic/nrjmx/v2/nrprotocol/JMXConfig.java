/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.newrelic.nrjmx.v2.nrprotocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class JMXConfig implements org.apache.thrift.TBase<JMXConfig, JMXConfig._Fields>, java.io.Serializable, Cloneable, Comparable<JMXConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JMXConfig");

  private static final org.apache.thrift.protocol.TField CONNECTION_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionURL", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField URI_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("uriPath", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField KEY_STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("keyStore", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField KEY_STORE_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyStorePassword", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRUST_STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("trustStore", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TRUST_STORE_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("trustStorePassword", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IS_REMOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("isRemote", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField IS_JBOSS_STANDALONE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("isJBossStandaloneMode", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField USE_SSL_FIELD_DESC = new org.apache.thrift.protocol.TField("useSSL", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField REQUEST_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestTimeoutMs", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField VERBOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("verbose", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField ENABLE_INTERNAL_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("enableInternalStats", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField MAX_INTERNAL_STATS_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxInternalStatsSize", org.apache.thrift.protocol.TType.I64, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JMXConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JMXConfigTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String connectionURL; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String hostname; // required
  public int port; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String uriPath; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String username; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String password; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String keyStore; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String keyStorePassword; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trustStore; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trustStorePassword; // required
  public boolean isRemote; // required
  public boolean isJBossStandaloneMode; // required
  public boolean useSSL; // required
  public long requestTimeoutMs; // required
  public boolean verbose; // required
  public boolean enableInternalStats; // required
  public long maxInternalStatsSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONNECTION_URL((short)1, "connectionURL"),
    HOSTNAME((short)2, "hostname"),
    PORT((short)3, "port"),
    URI_PATH((short)4, "uriPath"),
    USERNAME((short)5, "username"),
    PASSWORD((short)6, "password"),
    KEY_STORE((short)7, "keyStore"),
    KEY_STORE_PASSWORD((short)8, "keyStorePassword"),
    TRUST_STORE((short)9, "trustStore"),
    TRUST_STORE_PASSWORD((short)10, "trustStorePassword"),
    IS_REMOTE((short)11, "isRemote"),
    IS_JBOSS_STANDALONE_MODE((short)12, "isJBossStandaloneMode"),
    USE_SSL((short)13, "useSSL"),
    REQUEST_TIMEOUT_MS((short)14, "requestTimeoutMs"),
    VERBOSE((short)15, "verbose"),
    ENABLE_INTERNAL_STATS((short)16, "enableInternalStats"),
    MAX_INTERNAL_STATS_SIZE((short)17, "maxInternalStatsSize");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONNECTION_URL
          return CONNECTION_URL;
        case 2: // HOSTNAME
          return HOSTNAME;
        case 3: // PORT
          return PORT;
        case 4: // URI_PATH
          return URI_PATH;
        case 5: // USERNAME
          return USERNAME;
        case 6: // PASSWORD
          return PASSWORD;
        case 7: // KEY_STORE
          return KEY_STORE;
        case 8: // KEY_STORE_PASSWORD
          return KEY_STORE_PASSWORD;
        case 9: // TRUST_STORE
          return TRUST_STORE;
        case 10: // TRUST_STORE_PASSWORD
          return TRUST_STORE_PASSWORD;
        case 11: // IS_REMOTE
          return IS_REMOTE;
        case 12: // IS_JBOSS_STANDALONE_MODE
          return IS_JBOSS_STANDALONE_MODE;
        case 13: // USE_SSL
          return USE_SSL;
        case 14: // REQUEST_TIMEOUT_MS
          return REQUEST_TIMEOUT_MS;
        case 15: // VERBOSE
          return VERBOSE;
        case 16: // ENABLE_INTERNAL_STATS
          return ENABLE_INTERNAL_STATS;
        case 17: // MAX_INTERNAL_STATS_SIZE
          return MAX_INTERNAL_STATS_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __ISREMOTE_ISSET_ID = 1;
  private static final int __ISJBOSSSTANDALONEMODE_ISSET_ID = 2;
  private static final int __USESSL_ISSET_ID = 3;
  private static final int __REQUESTTIMEOUTMS_ISSET_ID = 4;
  private static final int __VERBOSE_ISSET_ID = 5;
  private static final int __ENABLEINTERNALSTATS_ISSET_ID = 6;
  private static final int __MAXINTERNALSTATSSIZE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.URI_PATH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONNECTION_URL, new org.apache.thrift.meta_data.FieldMetaData("connectionURL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.URI_PATH, new org.apache.thrift.meta_data.FieldMetaData("uriPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_STORE, new org.apache.thrift.meta_data.FieldMetaData("keyStore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_STORE_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("keyStorePassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRUST_STORE, new org.apache.thrift.meta_data.FieldMetaData("trustStore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRUST_STORE_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("trustStorePassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_REMOTE, new org.apache.thrift.meta_data.FieldMetaData("isRemote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_JBOSS_STANDALONE_MODE, new org.apache.thrift.meta_data.FieldMetaData("isJBossStandaloneMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_SSL, new org.apache.thrift.meta_data.FieldMetaData("useSSL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REQUEST_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("requestTimeoutMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERBOSE, new org.apache.thrift.meta_data.FieldMetaData("verbose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_INTERNAL_STATS, new org.apache.thrift.meta_data.FieldMetaData("enableInternalStats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_INTERNAL_STATS_SIZE, new org.apache.thrift.meta_data.FieldMetaData("maxInternalStatsSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JMXConfig.class, metaDataMap);
  }

  public JMXConfig() {
  }

  public JMXConfig(
    java.lang.String connectionURL,
    java.lang.String hostname,
    int port,
    java.lang.String username,
    java.lang.String password,
    java.lang.String keyStore,
    java.lang.String keyStorePassword,
    java.lang.String trustStore,
    java.lang.String trustStorePassword,
    boolean isRemote,
    boolean isJBossStandaloneMode,
    boolean useSSL,
    long requestTimeoutMs,
    boolean verbose,
    boolean enableInternalStats,
    long maxInternalStatsSize)
  {
    this();
    this.connectionURL = connectionURL;
    this.hostname = hostname;
    this.port = port;
    setPortIsSet(true);
    this.username = username;
    this.password = password;
    this.keyStore = keyStore;
    this.keyStorePassword = keyStorePassword;
    this.trustStore = trustStore;
    this.trustStorePassword = trustStorePassword;
    this.isRemote = isRemote;
    setIsRemoteIsSet(true);
    this.isJBossStandaloneMode = isJBossStandaloneMode;
    setIsJBossStandaloneModeIsSet(true);
    this.useSSL = useSSL;
    setUseSSLIsSet(true);
    this.requestTimeoutMs = requestTimeoutMs;
    setRequestTimeoutMsIsSet(true);
    this.verbose = verbose;
    setVerboseIsSet(true);
    this.enableInternalStats = enableInternalStats;
    setEnableInternalStatsIsSet(true);
    this.maxInternalStatsSize = maxInternalStatsSize;
    setMaxInternalStatsSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JMXConfig(JMXConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetConnectionURL()) {
      this.connectionURL = other.connectionURL;
    }
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    this.port = other.port;
    if (other.isSetUriPath()) {
      this.uriPath = other.uriPath;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetKeyStore()) {
      this.keyStore = other.keyStore;
    }
    if (other.isSetKeyStorePassword()) {
      this.keyStorePassword = other.keyStorePassword;
    }
    if (other.isSetTrustStore()) {
      this.trustStore = other.trustStore;
    }
    if (other.isSetTrustStorePassword()) {
      this.trustStorePassword = other.trustStorePassword;
    }
    this.isRemote = other.isRemote;
    this.isJBossStandaloneMode = other.isJBossStandaloneMode;
    this.useSSL = other.useSSL;
    this.requestTimeoutMs = other.requestTimeoutMs;
    this.verbose = other.verbose;
    this.enableInternalStats = other.enableInternalStats;
    this.maxInternalStatsSize = other.maxInternalStatsSize;
  }

  @Override
  public JMXConfig deepCopy() {
    return new JMXConfig(this);
  }

  @Override
  public void clear() {
    this.connectionURL = null;
    this.hostname = null;
    setPortIsSet(false);
    this.port = 0;
    this.uriPath = null;
    this.username = null;
    this.password = null;
    this.keyStore = null;
    this.keyStorePassword = null;
    this.trustStore = null;
    this.trustStorePassword = null;
    setIsRemoteIsSet(false);
    this.isRemote = false;
    setIsJBossStandaloneModeIsSet(false);
    this.isJBossStandaloneMode = false;
    setUseSSLIsSet(false);
    this.useSSL = false;
    setRequestTimeoutMsIsSet(false);
    this.requestTimeoutMs = 0;
    setVerboseIsSet(false);
    this.verbose = false;
    setEnableInternalStatsIsSet(false);
    this.enableInternalStats = false;
    setMaxInternalStatsSizeIsSet(false);
    this.maxInternalStatsSize = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getConnectionURL() {
    return this.connectionURL;
  }

  public JMXConfig setConnectionURL(@org.apache.thrift.annotation.Nullable java.lang.String connectionURL) {
    this.connectionURL = connectionURL;
    return this;
  }

  public void unsetConnectionURL() {
    this.connectionURL = null;
  }

  /** Returns true if field connectionURL is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionURL() {
    return this.connectionURL != null;
  }

  public void setConnectionURLIsSet(boolean value) {
    if (!value) {
      this.connectionURL = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHostname() {
    return this.hostname;
  }

  public JMXConfig setHostname(@org.apache.thrift.annotation.Nullable java.lang.String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public JMXConfig setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUriPath() {
    return this.uriPath;
  }

  public JMXConfig setUriPath(@org.apache.thrift.annotation.Nullable java.lang.String uriPath) {
    this.uriPath = uriPath;
    return this;
  }

  public void unsetUriPath() {
    this.uriPath = null;
  }

  /** Returns true if field uriPath is set (has been assigned a value) and false otherwise */
  public boolean isSetUriPath() {
    return this.uriPath != null;
  }

  public void setUriPathIsSet(boolean value) {
    if (!value) {
      this.uriPath = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsername() {
    return this.username;
  }

  public JMXConfig setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPassword() {
    return this.password;
  }

  public JMXConfig setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getKeyStore() {
    return this.keyStore;
  }

  public JMXConfig setKeyStore(@org.apache.thrift.annotation.Nullable java.lang.String keyStore) {
    this.keyStore = keyStore;
    return this;
  }

  public void unsetKeyStore() {
    this.keyStore = null;
  }

  /** Returns true if field keyStore is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyStore() {
    return this.keyStore != null;
  }

  public void setKeyStoreIsSet(boolean value) {
    if (!value) {
      this.keyStore = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getKeyStorePassword() {
    return this.keyStorePassword;
  }

  public JMXConfig setKeyStorePassword(@org.apache.thrift.annotation.Nullable java.lang.String keyStorePassword) {
    this.keyStorePassword = keyStorePassword;
    return this;
  }

  public void unsetKeyStorePassword() {
    this.keyStorePassword = null;
  }

  /** Returns true if field keyStorePassword is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyStorePassword() {
    return this.keyStorePassword != null;
  }

  public void setKeyStorePasswordIsSet(boolean value) {
    if (!value) {
      this.keyStorePassword = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrustStore() {
    return this.trustStore;
  }

  public JMXConfig setTrustStore(@org.apache.thrift.annotation.Nullable java.lang.String trustStore) {
    this.trustStore = trustStore;
    return this;
  }

  public void unsetTrustStore() {
    this.trustStore = null;
  }

  /** Returns true if field trustStore is set (has been assigned a value) and false otherwise */
  public boolean isSetTrustStore() {
    return this.trustStore != null;
  }

  public void setTrustStoreIsSet(boolean value) {
    if (!value) {
      this.trustStore = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrustStorePassword() {
    return this.trustStorePassword;
  }

  public JMXConfig setTrustStorePassword(@org.apache.thrift.annotation.Nullable java.lang.String trustStorePassword) {
    this.trustStorePassword = trustStorePassword;
    return this;
  }

  public void unsetTrustStorePassword() {
    this.trustStorePassword = null;
  }

  /** Returns true if field trustStorePassword is set (has been assigned a value) and false otherwise */
  public boolean isSetTrustStorePassword() {
    return this.trustStorePassword != null;
  }

  public void setTrustStorePasswordIsSet(boolean value) {
    if (!value) {
      this.trustStorePassword = null;
    }
  }

  public boolean isIsRemote() {
    return this.isRemote;
  }

  public JMXConfig setIsRemote(boolean isRemote) {
    this.isRemote = isRemote;
    setIsRemoteIsSet(true);
    return this;
  }

  public void unsetIsRemote() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREMOTE_ISSET_ID);
  }

  /** Returns true if field isRemote is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRemote() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREMOTE_ISSET_ID);
  }

  public void setIsRemoteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREMOTE_ISSET_ID, value);
  }

  public boolean isIsJBossStandaloneMode() {
    return this.isJBossStandaloneMode;
  }

  public JMXConfig setIsJBossStandaloneMode(boolean isJBossStandaloneMode) {
    this.isJBossStandaloneMode = isJBossStandaloneMode;
    setIsJBossStandaloneModeIsSet(true);
    return this;
  }

  public void unsetIsJBossStandaloneMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISJBOSSSTANDALONEMODE_ISSET_ID);
  }

  /** Returns true if field isJBossStandaloneMode is set (has been assigned a value) and false otherwise */
  public boolean isSetIsJBossStandaloneMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISJBOSSSTANDALONEMODE_ISSET_ID);
  }

  public void setIsJBossStandaloneModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISJBOSSSTANDALONEMODE_ISSET_ID, value);
  }

  public boolean isUseSSL() {
    return this.useSSL;
  }

  public JMXConfig setUseSSL(boolean useSSL) {
    this.useSSL = useSSL;
    setUseSSLIsSet(true);
    return this;
  }

  public void unsetUseSSL() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USESSL_ISSET_ID);
  }

  /** Returns true if field useSSL is set (has been assigned a value) and false otherwise */
  public boolean isSetUseSSL() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USESSL_ISSET_ID);
  }

  public void setUseSSLIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USESSL_ISSET_ID, value);
  }

  public long getRequestTimeoutMs() {
    return this.requestTimeoutMs;
  }

  public JMXConfig setRequestTimeoutMs(long requestTimeoutMs) {
    this.requestTimeoutMs = requestTimeoutMs;
    setRequestTimeoutMsIsSet(true);
    return this;
  }

  public void unsetRequestTimeoutMs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTTIMEOUTMS_ISSET_ID);
  }

  /** Returns true if field requestTimeoutMs is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestTimeoutMs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTTIMEOUTMS_ISSET_ID);
  }

  public void setRequestTimeoutMsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTTIMEOUTMS_ISSET_ID, value);
  }

  public boolean isVerbose() {
    return this.verbose;
  }

  public JMXConfig setVerbose(boolean verbose) {
    this.verbose = verbose;
    setVerboseIsSet(true);
    return this;
  }

  public void unsetVerbose() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERBOSE_ISSET_ID);
  }

  /** Returns true if field verbose is set (has been assigned a value) and false otherwise */
  public boolean isSetVerbose() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERBOSE_ISSET_ID);
  }

  public void setVerboseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERBOSE_ISSET_ID, value);
  }

  public boolean isEnableInternalStats() {
    return this.enableInternalStats;
  }

  public JMXConfig setEnableInternalStats(boolean enableInternalStats) {
    this.enableInternalStats = enableInternalStats;
    setEnableInternalStatsIsSet(true);
    return this;
  }

  public void unsetEnableInternalStats() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLEINTERNALSTATS_ISSET_ID);
  }

  /** Returns true if field enableInternalStats is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableInternalStats() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLEINTERNALSTATS_ISSET_ID);
  }

  public void setEnableInternalStatsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLEINTERNALSTATS_ISSET_ID, value);
  }

  public long getMaxInternalStatsSize() {
    return this.maxInternalStatsSize;
  }

  public JMXConfig setMaxInternalStatsSize(long maxInternalStatsSize) {
    this.maxInternalStatsSize = maxInternalStatsSize;
    setMaxInternalStatsSizeIsSet(true);
    return this;
  }

  public void unsetMaxInternalStatsSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXINTERNALSTATSSIZE_ISSET_ID);
  }

  /** Returns true if field maxInternalStatsSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxInternalStatsSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXINTERNALSTATSSIZE_ISSET_ID);
  }

  public void setMaxInternalStatsSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXINTERNALSTATSSIZE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CONNECTION_URL:
      if (value == null) {
        unsetConnectionURL();
      } else {
        setConnectionURL((java.lang.String)value);
      }
      break;

    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((java.lang.String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((java.lang.Integer)value);
      }
      break;

    case URI_PATH:
      if (value == null) {
        unsetUriPath();
      } else {
        setUriPath((java.lang.String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case KEY_STORE:
      if (value == null) {
        unsetKeyStore();
      } else {
        setKeyStore((java.lang.String)value);
      }
      break;

    case KEY_STORE_PASSWORD:
      if (value == null) {
        unsetKeyStorePassword();
      } else {
        setKeyStorePassword((java.lang.String)value);
      }
      break;

    case TRUST_STORE:
      if (value == null) {
        unsetTrustStore();
      } else {
        setTrustStore((java.lang.String)value);
      }
      break;

    case TRUST_STORE_PASSWORD:
      if (value == null) {
        unsetTrustStorePassword();
      } else {
        setTrustStorePassword((java.lang.String)value);
      }
      break;

    case IS_REMOTE:
      if (value == null) {
        unsetIsRemote();
      } else {
        setIsRemote((java.lang.Boolean)value);
      }
      break;

    case IS_JBOSS_STANDALONE_MODE:
      if (value == null) {
        unsetIsJBossStandaloneMode();
      } else {
        setIsJBossStandaloneMode((java.lang.Boolean)value);
      }
      break;

    case USE_SSL:
      if (value == null) {
        unsetUseSSL();
      } else {
        setUseSSL((java.lang.Boolean)value);
      }
      break;

    case REQUEST_TIMEOUT_MS:
      if (value == null) {
        unsetRequestTimeoutMs();
      } else {
        setRequestTimeoutMs((java.lang.Long)value);
      }
      break;

    case VERBOSE:
      if (value == null) {
        unsetVerbose();
      } else {
        setVerbose((java.lang.Boolean)value);
      }
      break;

    case ENABLE_INTERNAL_STATS:
      if (value == null) {
        unsetEnableInternalStats();
      } else {
        setEnableInternalStats((java.lang.Boolean)value);
      }
      break;

    case MAX_INTERNAL_STATS_SIZE:
      if (value == null) {
        unsetMaxInternalStatsSize();
      } else {
        setMaxInternalStatsSize((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CONNECTION_URL:
      return getConnectionURL();

    case HOSTNAME:
      return getHostname();

    case PORT:
      return getPort();

    case URI_PATH:
      return getUriPath();

    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case KEY_STORE:
      return getKeyStore();

    case KEY_STORE_PASSWORD:
      return getKeyStorePassword();

    case TRUST_STORE:
      return getTrustStore();

    case TRUST_STORE_PASSWORD:
      return getTrustStorePassword();

    case IS_REMOTE:
      return isIsRemote();

    case IS_JBOSS_STANDALONE_MODE:
      return isIsJBossStandaloneMode();

    case USE_SSL:
      return isUseSSL();

    case REQUEST_TIMEOUT_MS:
      return getRequestTimeoutMs();

    case VERBOSE:
      return isVerbose();

    case ENABLE_INTERNAL_STATS:
      return isEnableInternalStats();

    case MAX_INTERNAL_STATS_SIZE:
      return getMaxInternalStatsSize();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CONNECTION_URL:
      return isSetConnectionURL();
    case HOSTNAME:
      return isSetHostname();
    case PORT:
      return isSetPort();
    case URI_PATH:
      return isSetUriPath();
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case KEY_STORE:
      return isSetKeyStore();
    case KEY_STORE_PASSWORD:
      return isSetKeyStorePassword();
    case TRUST_STORE:
      return isSetTrustStore();
    case TRUST_STORE_PASSWORD:
      return isSetTrustStorePassword();
    case IS_REMOTE:
      return isSetIsRemote();
    case IS_JBOSS_STANDALONE_MODE:
      return isSetIsJBossStandaloneMode();
    case USE_SSL:
      return isSetUseSSL();
    case REQUEST_TIMEOUT_MS:
      return isSetRequestTimeoutMs();
    case VERBOSE:
      return isSetVerbose();
    case ENABLE_INTERNAL_STATS:
      return isSetEnableInternalStats();
    case MAX_INTERNAL_STATS_SIZE:
      return isSetMaxInternalStatsSize();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof JMXConfig)
      return this.equals((JMXConfig)that);
    return false;
  }

  public boolean equals(JMXConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_connectionURL = true && this.isSetConnectionURL();
    boolean that_present_connectionURL = true && that.isSetConnectionURL();
    if (this_present_connectionURL || that_present_connectionURL) {
      if (!(this_present_connectionURL && that_present_connectionURL))
        return false;
      if (!this.connectionURL.equals(that.connectionURL))
        return false;
    }

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_uriPath = true && this.isSetUriPath();
    boolean that_present_uriPath = true && that.isSetUriPath();
    if (this_present_uriPath || that_present_uriPath) {
      if (!(this_present_uriPath && that_present_uriPath))
        return false;
      if (!this.uriPath.equals(that.uriPath))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_keyStore = true && this.isSetKeyStore();
    boolean that_present_keyStore = true && that.isSetKeyStore();
    if (this_present_keyStore || that_present_keyStore) {
      if (!(this_present_keyStore && that_present_keyStore))
        return false;
      if (!this.keyStore.equals(that.keyStore))
        return false;
    }

    boolean this_present_keyStorePassword = true && this.isSetKeyStorePassword();
    boolean that_present_keyStorePassword = true && that.isSetKeyStorePassword();
    if (this_present_keyStorePassword || that_present_keyStorePassword) {
      if (!(this_present_keyStorePassword && that_present_keyStorePassword))
        return false;
      if (!this.keyStorePassword.equals(that.keyStorePassword))
        return false;
    }

    boolean this_present_trustStore = true && this.isSetTrustStore();
    boolean that_present_trustStore = true && that.isSetTrustStore();
    if (this_present_trustStore || that_present_trustStore) {
      if (!(this_present_trustStore && that_present_trustStore))
        return false;
      if (!this.trustStore.equals(that.trustStore))
        return false;
    }

    boolean this_present_trustStorePassword = true && this.isSetTrustStorePassword();
    boolean that_present_trustStorePassword = true && that.isSetTrustStorePassword();
    if (this_present_trustStorePassword || that_present_trustStorePassword) {
      if (!(this_present_trustStorePassword && that_present_trustStorePassword))
        return false;
      if (!this.trustStorePassword.equals(that.trustStorePassword))
        return false;
    }

    boolean this_present_isRemote = true;
    boolean that_present_isRemote = true;
    if (this_present_isRemote || that_present_isRemote) {
      if (!(this_present_isRemote && that_present_isRemote))
        return false;
      if (this.isRemote != that.isRemote)
        return false;
    }

    boolean this_present_isJBossStandaloneMode = true;
    boolean that_present_isJBossStandaloneMode = true;
    if (this_present_isJBossStandaloneMode || that_present_isJBossStandaloneMode) {
      if (!(this_present_isJBossStandaloneMode && that_present_isJBossStandaloneMode))
        return false;
      if (this.isJBossStandaloneMode != that.isJBossStandaloneMode)
        return false;
    }

    boolean this_present_useSSL = true;
    boolean that_present_useSSL = true;
    if (this_present_useSSL || that_present_useSSL) {
      if (!(this_present_useSSL && that_present_useSSL))
        return false;
      if (this.useSSL != that.useSSL)
        return false;
    }

    boolean this_present_requestTimeoutMs = true;
    boolean that_present_requestTimeoutMs = true;
    if (this_present_requestTimeoutMs || that_present_requestTimeoutMs) {
      if (!(this_present_requestTimeoutMs && that_present_requestTimeoutMs))
        return false;
      if (this.requestTimeoutMs != that.requestTimeoutMs)
        return false;
    }

    boolean this_present_verbose = true;
    boolean that_present_verbose = true;
    if (this_present_verbose || that_present_verbose) {
      if (!(this_present_verbose && that_present_verbose))
        return false;
      if (this.verbose != that.verbose)
        return false;
    }

    boolean this_present_enableInternalStats = true;
    boolean that_present_enableInternalStats = true;
    if (this_present_enableInternalStats || that_present_enableInternalStats) {
      if (!(this_present_enableInternalStats && that_present_enableInternalStats))
        return false;
      if (this.enableInternalStats != that.enableInternalStats)
        return false;
    }

    boolean this_present_maxInternalStatsSize = true;
    boolean that_present_maxInternalStatsSize = true;
    if (this_present_maxInternalStatsSize || that_present_maxInternalStatsSize) {
      if (!(this_present_maxInternalStatsSize && that_present_maxInternalStatsSize))
        return false;
      if (this.maxInternalStatsSize != that.maxInternalStatsSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetConnectionURL()) ? 131071 : 524287);
    if (isSetConnectionURL())
      hashCode = hashCode * 8191 + connectionURL.hashCode();

    hashCode = hashCode * 8191 + ((isSetHostname()) ? 131071 : 524287);
    if (isSetHostname())
      hashCode = hashCode * 8191 + hostname.hashCode();

    hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + ((isSetUriPath()) ? 131071 : 524287);
    if (isSetUriPath())
      hashCode = hashCode * 8191 + uriPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyStore()) ? 131071 : 524287);
    if (isSetKeyStore())
      hashCode = hashCode * 8191 + keyStore.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyStorePassword()) ? 131071 : 524287);
    if (isSetKeyStorePassword())
      hashCode = hashCode * 8191 + keyStorePassword.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrustStore()) ? 131071 : 524287);
    if (isSetTrustStore())
      hashCode = hashCode * 8191 + trustStore.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrustStorePassword()) ? 131071 : 524287);
    if (isSetTrustStorePassword())
      hashCode = hashCode * 8191 + trustStorePassword.hashCode();

    hashCode = hashCode * 8191 + ((isRemote) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isJBossStandaloneMode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((useSSL) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestTimeoutMs);

    hashCode = hashCode * 8191 + ((verbose) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((enableInternalStats) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(maxInternalStatsSize);

    return hashCode;
  }

  @Override
  public int compareTo(JMXConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetConnectionURL(), other.isSetConnectionURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionURL, other.connectionURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHostname(), other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPort(), other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUriPath(), other.isSetUriPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUriPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uriPath, other.uriPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUsername(), other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPassword(), other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeyStore(), other.isSetKeyStore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyStore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyStore, other.keyStore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeyStorePassword(), other.isSetKeyStorePassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyStorePassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyStorePassword, other.keyStorePassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrustStore(), other.isSetTrustStore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrustStore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trustStore, other.trustStore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrustStorePassword(), other.isSetTrustStorePassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrustStorePassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trustStorePassword, other.trustStorePassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsRemote(), other.isSetIsRemote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRemote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRemote, other.isRemote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsJBossStandaloneMode(), other.isSetIsJBossStandaloneMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsJBossStandaloneMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isJBossStandaloneMode, other.isJBossStandaloneMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUseSSL(), other.isSetUseSSL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseSSL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useSSL, other.useSSL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequestTimeoutMs(), other.isSetRequestTimeoutMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestTimeoutMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestTimeoutMs, other.requestTimeoutMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVerbose(), other.isSetVerbose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerbose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verbose, other.verbose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableInternalStats(), other.isSetEnableInternalStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableInternalStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableInternalStats, other.enableInternalStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxInternalStatsSize(), other.isSetMaxInternalStatsSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxInternalStatsSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxInternalStatsSize, other.maxInternalStatsSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JMXConfig(");
    boolean first = true;

    sb.append("connectionURL:");
    if (this.connectionURL == null) {
      sb.append("null");
    } else {
      sb.append(this.connectionURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (isSetUriPath()) {
      if (!first) sb.append(", ");
      sb.append("uriPath:");
      if (this.uriPath == null) {
        sb.append("null");
      } else {
        sb.append(this.uriPath);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyStore:");
    if (this.keyStore == null) {
      sb.append("null");
    } else {
      sb.append(this.keyStore);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyStorePassword:");
    if (this.keyStorePassword == null) {
      sb.append("null");
    } else {
      sb.append(this.keyStorePassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trustStore:");
    if (this.trustStore == null) {
      sb.append("null");
    } else {
      sb.append(this.trustStore);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trustStorePassword:");
    if (this.trustStorePassword == null) {
      sb.append("null");
    } else {
      sb.append(this.trustStorePassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRemote:");
    sb.append(this.isRemote);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isJBossStandaloneMode:");
    sb.append(this.isJBossStandaloneMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useSSL:");
    sb.append(this.useSSL);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestTimeoutMs:");
    sb.append(this.requestTimeoutMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("verbose:");
    sb.append(this.verbose);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enableInternalStats:");
    sb.append(this.enableInternalStats);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxInternalStatsSize:");
    sb.append(this.maxInternalStatsSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JMXConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public JMXConfigStandardScheme getScheme() {
      return new JMXConfigStandardScheme();
    }
  }

  private static class JMXConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<JMXConfig> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, JMXConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONNECTION_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connectionURL = iprot.readString();
              struct.setConnectionURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URI_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uriPath = iprot.readString();
              struct.setUriPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KEY_STORE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyStore = iprot.readString();
              struct.setKeyStoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // KEY_STORE_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyStorePassword = iprot.readString();
              struct.setKeyStorePasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRUST_STORE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trustStore = iprot.readString();
              struct.setTrustStoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TRUST_STORE_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trustStorePassword = iprot.readString();
              struct.setTrustStorePasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_REMOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRemote = iprot.readBool();
              struct.setIsRemoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_JBOSS_STANDALONE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isJBossStandaloneMode = iprot.readBool();
              struct.setIsJBossStandaloneModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USE_SSL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.useSSL = iprot.readBool();
              struct.setUseSSLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REQUEST_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestTimeoutMs = iprot.readI64();
              struct.setRequestTimeoutMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // VERBOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.verbose = iprot.readBool();
              struct.setVerboseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ENABLE_INTERNAL_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableInternalStats = iprot.readBool();
              struct.setEnableInternalStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MAX_INTERNAL_STATS_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxInternalStatsSize = iprot.readI64();
              struct.setMaxInternalStatsSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, JMXConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.connectionURL != null) {
        oprot.writeFieldBegin(CONNECTION_URL_FIELD_DESC);
        oprot.writeString(struct.connectionURL);
        oprot.writeFieldEnd();
      }
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      if (struct.uriPath != null) {
        if (struct.isSetUriPath()) {
          oprot.writeFieldBegin(URI_PATH_FIELD_DESC);
          oprot.writeString(struct.uriPath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.keyStore != null) {
        oprot.writeFieldBegin(KEY_STORE_FIELD_DESC);
        oprot.writeString(struct.keyStore);
        oprot.writeFieldEnd();
      }
      if (struct.keyStorePassword != null) {
        oprot.writeFieldBegin(KEY_STORE_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.keyStorePassword);
        oprot.writeFieldEnd();
      }
      if (struct.trustStore != null) {
        oprot.writeFieldBegin(TRUST_STORE_FIELD_DESC);
        oprot.writeString(struct.trustStore);
        oprot.writeFieldEnd();
      }
      if (struct.trustStorePassword != null) {
        oprot.writeFieldBegin(TRUST_STORE_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.trustStorePassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_REMOTE_FIELD_DESC);
      oprot.writeBool(struct.isRemote);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_JBOSS_STANDALONE_MODE_FIELD_DESC);
      oprot.writeBool(struct.isJBossStandaloneMode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_SSL_FIELD_DESC);
      oprot.writeBool(struct.useSSL);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_TIMEOUT_MS_FIELD_DESC);
      oprot.writeI64(struct.requestTimeoutMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERBOSE_FIELD_DESC);
      oprot.writeBool(struct.verbose);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLE_INTERNAL_STATS_FIELD_DESC);
      oprot.writeBool(struct.enableInternalStats);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_INTERNAL_STATS_SIZE_FIELD_DESC);
      oprot.writeI64(struct.maxInternalStatsSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JMXConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public JMXConfigTupleScheme getScheme() {
      return new JMXConfigTupleScheme();
    }
  }

  private static class JMXConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<JMXConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JMXConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConnectionURL()) {
        optionals.set(0);
      }
      if (struct.isSetHostname()) {
        optionals.set(1);
      }
      if (struct.isSetPort()) {
        optionals.set(2);
      }
      if (struct.isSetUriPath()) {
        optionals.set(3);
      }
      if (struct.isSetUsername()) {
        optionals.set(4);
      }
      if (struct.isSetPassword()) {
        optionals.set(5);
      }
      if (struct.isSetKeyStore()) {
        optionals.set(6);
      }
      if (struct.isSetKeyStorePassword()) {
        optionals.set(7);
      }
      if (struct.isSetTrustStore()) {
        optionals.set(8);
      }
      if (struct.isSetTrustStorePassword()) {
        optionals.set(9);
      }
      if (struct.isSetIsRemote()) {
        optionals.set(10);
      }
      if (struct.isSetIsJBossStandaloneMode()) {
        optionals.set(11);
      }
      if (struct.isSetUseSSL()) {
        optionals.set(12);
      }
      if (struct.isSetRequestTimeoutMs()) {
        optionals.set(13);
      }
      if (struct.isSetVerbose()) {
        optionals.set(14);
      }
      if (struct.isSetEnableInternalStats()) {
        optionals.set(15);
      }
      if (struct.isSetMaxInternalStatsSize()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetConnectionURL()) {
        oprot.writeString(struct.connectionURL);
      }
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetUriPath()) {
        oprot.writeString(struct.uriPath);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetKeyStore()) {
        oprot.writeString(struct.keyStore);
      }
      if (struct.isSetKeyStorePassword()) {
        oprot.writeString(struct.keyStorePassword);
      }
      if (struct.isSetTrustStore()) {
        oprot.writeString(struct.trustStore);
      }
      if (struct.isSetTrustStorePassword()) {
        oprot.writeString(struct.trustStorePassword);
      }
      if (struct.isSetIsRemote()) {
        oprot.writeBool(struct.isRemote);
      }
      if (struct.isSetIsJBossStandaloneMode()) {
        oprot.writeBool(struct.isJBossStandaloneMode);
      }
      if (struct.isSetUseSSL()) {
        oprot.writeBool(struct.useSSL);
      }
      if (struct.isSetRequestTimeoutMs()) {
        oprot.writeI64(struct.requestTimeoutMs);
      }
      if (struct.isSetVerbose()) {
        oprot.writeBool(struct.verbose);
      }
      if (struct.isSetEnableInternalStats()) {
        oprot.writeBool(struct.enableInternalStats);
      }
      if (struct.isSetMaxInternalStatsSize()) {
        oprot.writeI64(struct.maxInternalStatsSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JMXConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.connectionURL = iprot.readString();
        struct.setConnectionURLIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.uriPath = iprot.readString();
        struct.setUriPathIsSet(true);
      }
      if (incoming.get(4)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.keyStore = iprot.readString();
        struct.setKeyStoreIsSet(true);
      }
      if (incoming.get(7)) {
        struct.keyStorePassword = iprot.readString();
        struct.setKeyStorePasswordIsSet(true);
      }
      if (incoming.get(8)) {
        struct.trustStore = iprot.readString();
        struct.setTrustStoreIsSet(true);
      }
      if (incoming.get(9)) {
        struct.trustStorePassword = iprot.readString();
        struct.setTrustStorePasswordIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isRemote = iprot.readBool();
        struct.setIsRemoteIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isJBossStandaloneMode = iprot.readBool();
        struct.setIsJBossStandaloneModeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.useSSL = iprot.readBool();
        struct.setUseSSLIsSet(true);
      }
      if (incoming.get(13)) {
        struct.requestTimeoutMs = iprot.readI64();
        struct.setRequestTimeoutMsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.verbose = iprot.readBool();
        struct.setVerboseIsSet(true);
      }
      if (incoming.get(15)) {
        struct.enableInternalStats = iprot.readBool();
        struct.setEnableInternalStatsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.maxInternalStatsSize = iprot.readI64();
        struct.setMaxInternalStatsSizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

