---
name: Prerelease pipeline

on:
  release:
    types:
      - prereleased
    tags:
      - 'v*'

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GPG_MAIL: 'infrastructure-eng@newrelic.com' # info@newrelic.com
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_BASE64: ${{ secrets.PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_PASSPHRASE:  ${{ secrets.PFX_PASSPHRASE }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  TAG: ${{ github.event.release.tag_name }}

jobs:

  test:
    name: Run tests
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Restore gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          java-package: jdk
      - name: Build with Gradle
        run: ./gradlew build --info --stacktrace

  package-linux:
    name: Run Linux package task
    runs-on: ubuntu-18.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Restore gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          java-package: jdk
      - name: Package with Gradle
        run: ./gradlew package --warn --stacktrace
      - name: Install debsigs
        run: sudo apt-get install -y debsigs
      - name: Sign packages
        run: ./script/sign.sh
      - name: Upload release asset to GitHub Release
        run: script/upload_linux_release.sh ./build/distributions/nrjmx ${{ env.TAG }}

  package-windows:
    name: Run Windows package task
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [ amd64 ]
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Restore gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          java-package: jdk
      - name: Build jlink code
        run: ./gradlew package-windows --info --stacktrace
      - name: Get PFX certificate from GH secrets
        run: '[IO.File]::WriteAllBytes("wincert.pfx", [Convert]::FromBase64String($env:PFX_CERTIFICATE_BASE64))'
      - name: Install cert
        run: Import-PfxCertificate -FilePath wincert.pfx -Password (ConvertTo-SecureString -String $env:PFX_PASSPHRASE -AsPlainText -Force) -CertStoreLocation Cert:\CurrentUser\My
      - name: Create MSI
        run: ./win_build.ps1 -arch ${{ matrix.arch }} -version ${{ env.TAG }}
      - name: Upload release asset to GitHub Release
        shell: bash
        run: script/upload_windows_release.sh ./target/msi/Release/nrjmx-${{ matrix.arch }} ${{ env.TAG }}
      - name: Upload release asset to GitHub Release
        shell: bash
        run: script/upload_zip_release.sh ./build/distributions/nrjmx ${{ env.TAG }}
