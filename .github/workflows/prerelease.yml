name: Prerelease pipeline

on:
  release:
    types:
      - prereleased
    tags:
      - 'v*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GPG_MAIL: 'infrastructure-eng@newrelic.com'
  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_BASE64: ${{ secrets.OHAI_PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_DESCRIPTION: 'New Relic'
  PFX_PASSPHRASE: ${{ secrets.OHAI_PFX_PASSPHRASE }}
  TAG: ${{ github.event.release.tag_name }}
  DOCKER_HUB_ID: ${{ secrets.OHAI_DOCKER_HUB_ID }}
  DOCKER_HUB_PASSWORD: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}
  SCHEMA_BRANCH: ${{ github.event.release.tag_name }}
  AWS_S3_BUCKET_NAME: "nr-downloads-ohai-staging"
  AWS_S3_LOCK_BUCKET_NAME: "onhost-ci-lock-staging"
  AWS_REGION: "us-east-1"

jobs:
  unit-test-linux:
    name: Linux unit tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Running unit tests
        run: make ci/test

  test-go-linux-jdk8:
    name: Linux unit tests for Go on JDK 8
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'gojmx/go.mod'
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Running unit tests
        run: make ci/go-test

  test-go-linux-jdk11:
    name: Linux unit tests for Go on JDK 11
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'gojmx/go.mod'
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Running unit tests
        run: make ci/go-test-jdk11

  check-gen-code:
    name: Checking generated code
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}
      - name: Checking generated code
        run: make ci/check-gen-code

  packaging:
    name: Build and upload artifacts into GH Release assets
    runs-on: ubuntu-latest
    needs: [ unit-test-linux, test-go-linux-jdk8, test-go-linux-jdk11, check-gen-code ]

    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Releasing packages
        run: make ci/release

  packaging-msi:
    name: Build and upload MSI packages into GH Release assets
    runs-on: windows-2025
    needs: [ packaging ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get PFX certificate from GH secrets
        shell: bash
        run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > wincert.pfx

      - name: Import PFX certificate
        shell: pwsh
        run: build\windows\import_certificates.ps1 -pfx_passphrase "$env:PFX_PASSPHRASE" -pfx_certificate_description "$env:PFX_CERTIFICATE_DESCRIPTION"

      - name: Build MSI amd64
        shell: pwsh
        run: build\windows\package_msi.ps1 -arch amd64 -tag ${{env.TAG}}

      - name: Upload MSI to GH
        shell: bash
        run: build/upload_artifacts_gh.sh

  publishing-regular-to-s3:
    name: Publish regular packages to S3 staging bucket
    runs-on: ubuntu-latest-4-cores
    needs: [ packaging, packaging-msi ]

    steps:
      - name: Debug - Show parameters for regular packages
        run: |
          echo "Regular packages publishing:"
          echo "  app_name: nrjmx"
          echo "  schema: nrjmx"
          
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Publish regular packages to S3
        uses: newrelic/infrastructure-publish-action@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.OHAI_AWS_ACCESS_KEY_ID_STAGING }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.OHAI_AWS_SECRET_ACCESS_KEY_STAGING }}
          AWS_ROLE_ARN: ${{ secrets.OHAI_AWS_ROLE_ARN_STAGING }}
          AWS_ROLE_SESSION_NAME: ${{ secrets.OHAI_AWS_ROLE_SESSION_NAME_STAGING }}
        with:
          disable_lock: false
          tag: ${{env.TAG}}
          app_name: "nrjmx"
          repo_name: "newrelic/nrjmx"
          schema: "nrjmx"
          aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_s3_bucket_name: ${{ env.AWS_S3_BUCKET_NAME }}
          aws_s3_lock_bucket_name: ${{ env.AWS_S3_LOCK_BUCKET_NAME }}
          access_point_host: "staging"
          run_id: ${{ github.run_id }}
          aws_region: ${{ env.AWS_REGION }}
          aws_role_session_name: ${{ env.AWS_ROLE_SESSION_NAME }}
          aws_role_arn: ${{ env.AWS_ROLE_ARN }}
          gpg_passphrase: ${{ env.GPG_PASSPHRASE }}
          gpg_private_key_base64: ${{ env.GPG_PRIVATE_KEY_BASE64 }}

  publishing-fips-to-s3:
    name: Publish FIPS packages to S3 staging bucket
    runs-on: ubuntu-latest-4-cores
    needs: [ packaging, packaging-msi, publishing-regular-to-s3 ]  # Wait for regular publishing
    if: ${{ always() && !cancelled() && !failure() && needs.publishing-regular-to-s3.result == 'success' }}

    steps:
      - name: Debug - Show parameters for FIPS packages
        run: |
          echo "FIPS packages publishing:"
          echo "  app_name: nrjmx-fips"
          echo "  schema: nrjmx-fips"
          
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Publish FIPS packages to S3
        uses: newrelic/infrastructure-publish-action@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.OHAI_AWS_ACCESS_KEY_ID_STAGING }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.OHAI_AWS_SECRET_ACCESS_KEY_STAGING }}
          AWS_ROLE_ARN: ${{ secrets.OHAI_AWS_ROLE_ARN_STAGING }}
          AWS_ROLE_SESSION_NAME: ${{ secrets.OHAI_AWS_ROLE_SESSION_NAME_STAGING }}
        with:
          disable_lock: false
          tag: ${{env.TAG}}
          app_name: "nrjmx-fips"
          repo_name: "newrelic/nrjmx"
          schema: "nrjmx-fips"
          aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_s3_bucket_name: ${{ env.AWS_S3_BUCKET_NAME }}
          aws_s3_lock_bucket_name: ${{ env.AWS_S3_LOCK_BUCKET_NAME }}
          access_point_host: "staging"
          run_id: ${{ github.run_id }}
          aws_region: ${{ env.AWS_REGION }}
          aws_role_session_name: ${{ env.AWS_ROLE_SESSION_NAME }}
          aws_role_arn: ${{ env.AWS_ROLE_ARN }}
          # NOT setting dest_prefix - uses default "infrastructure_agent/"
          gpg_passphrase: ${{ env.GPG_PASSPHRASE }}
          gpg_private_key_base64: ${{ env.GPG_PRIVATE_KEY_BASE64 }}

  finalize-release:
    name: Finalize release
    needs: [ publishing-regular-to-s3, publishing-fips-to-s3 ]
    if: ${{ always() && !cancelled() && !failure() && needs.publishing-regular-to-s3.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Update title for successful pre-release
        if: ${{ github.event.release.prerelease }}
        env:
          GH_TOKEN: "${{ secrets.COREINT_BOT_TOKEN }}"
        run: |
          gh release edit ${{ env.TAG }} --title "${{ env.TAG }}"

  notify-failure:
    if: ${{ always() && failure() }}
    needs: [unit-test-linux, test-go-linux-jdk8, test-go-linux-jdk11, check-gen-code, packaging, packaging-msi, publishing-regular-to-s3, publishing-fips-to-s3]
    runs-on: ubuntu-latest
    steps:
      - name: Notify failure via Slack
        uses: archive/github-actions-slack@master
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.COREINT_SLACK_TOKEN }}
          slack-channel: ${{ secrets.COREINT_SLACK_CHANNEL }}
          slack-text: "‚ùå `${{ github.event.repository.full_name }}`: [prerelease pipeline failed](${{ github.server_url }}/${{ github.event.repository.full_name }}/actions/runs/${{ github.run_id }})."

  update-title-on-failure:
    if: ${{ always() && failure() }}
    needs: [unit-test-linux, test-go-linux-jdk8, test-go-linux-jdk11, check-gen-code, packaging, packaging-msi, publishing-regular-to-s3, publishing-fips-to-s3]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Reflect failure in prerelease title
        env:
          GH_TOKEN: "${{ secrets.COREINT_BOT_TOKEN }}"
        run: |
          gh release edit ${{ env.TAG }} --title "${{ env.TAG }} (pre-release-failure)"